{"ast":null,"code":"import { all, fork, put, delay, takeLatest, takeEvery, call } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from \"../reducers/post\";\n\nfunction* addPostAPI(postData) {\n  return axios.post(\"/post\", postData, {\n    withCredentials: true // 로그인한 사용자만 가능하게 쿠키\n\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* addCommnetAPI() {}\n\nfunction* addCommnet(action) {\n  //saga도 액션 데이터를 받을 수 있다 여기 액션 데이터는 PostCard 의 onSubmitComment 에서 보낸다\n  try {\n    yield delay(2000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddCommnet() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addCommnet);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddCommnet)]);\n}","map":{"version":3,"sources":["D:\\이정걸\\web\\react_nodebird\\frontend\\sagas\\post.js"],"names":["all","fork","put","delay","takeLatest","takeEvery","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPostAPI","postData","post","withCredentials","addPost","action","result","data","type","e","error","watchAddPost","addCommnetAPI","addCommnet","postId","watchAddCommnet","postSaga"],"mappings":"AAAA,SACEA,GADF,EAEEC,IAFF,EAGEC,GAHF,EAIEC,KAJF,EAKEC,UALF,EAMEC,SANF,EAOEC,IAPF,QAQO,oBARP;AASA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,gBADF,EAEEC,gBAFF,EAGEC,gBAHF,EAIEC,mBAJF,EAKEC,mBALF,EAMEC,mBANF,QAOO,kBAPP;;AASA,UAAUC,UAAV,CAAqBC,QAArB,EAA+B;AAC7B,SAAOR,KAAK,CAACS,IAAN,CAAW,OAAX,EAAoBD,QAApB,EAA8B;AACnCE,IAAAA,eAAe,EAAE,IADkB,CACZ;;AADY,GAA9B,CAAP;AAGD;;AAED,UAAUC,OAAV,CAAkBC,MAAlB,EAA0B;AACxB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMd,IAAI,CAACQ,UAAD,EAAaK,MAAM,CAACE,IAApB,CAAzB;AACA,UAAMnB,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAEb,gBADE;AAERY,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOE,CAAP,EAAU;AACV,UAAMrB,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAEZ,gBADE;AAERc,MAAAA,KAAK,EAAED;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUE,YAAV,GAAyB;AACvB,QAAMrB,UAAU,CAACI,gBAAD,EAAmBU,OAAnB,CAAhB;AACD;;AAED,UAAUQ,aAAV,GAA0B,CAAE;;AAE5B,UAAUC,UAAV,CAAqBR,MAArB,EAA6B;AAC3B;AACA,MAAI;AACF,UAAMhB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAEV,mBADE;AAERS,MAAAA,IAAI,EAAE;AACJO,QAAAA,MAAM,EAAET,MAAM,CAACE,IAAP,CAAYO;AADhB;AAFE,KAAD,CAAT;AAMD,GARD,CAQE,OAAOL,CAAP,EAAU;AACV,UAAMrB,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAET,mBADE;AAERW,MAAAA,KAAK,EAAED;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUM,eAAV,GAA4B;AAC1B,QAAMzB,UAAU,CAACO,mBAAD,EAAsBgB,UAAtB,CAAhB;AACD;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAM9B,GAAG,CAAC,CAACC,IAAI,CAACwB,YAAD,CAAL,EAAqBxB,IAAI,CAAC4B,eAAD,CAAzB,CAAD,CAAT;AACD","sourcesContent":["import {\r\n  all,\r\n  fork,\r\n  put,\r\n  delay,\r\n  takeLatest,\r\n  takeEvery,\r\n  call,\r\n} from \"redux-saga/effects\";\r\nimport axios from 'axios';\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE\r\n} from \"../reducers/post\";\r\n\r\nfunction* addPostAPI(postData) {\r\n  return axios.post(\"/post\", postData, {\r\n    withCredentials: true, // 로그인한 사용자만 가능하게 쿠키\r\n  });\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data)\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* addCommnetAPI() {}\r\n\r\nfunction* addCommnet(action) {\r\n  //saga도 액션 데이터를 받을 수 있다 여기 액션 데이터는 PostCard 의 onSubmitComment 에서 보낸다\r\n  try {\r\n    yield delay(2000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: {\r\n        postId: action.data.postId,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddCommnet() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addCommnet);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchAddCommnet)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}