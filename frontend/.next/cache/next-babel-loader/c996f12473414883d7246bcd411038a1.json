{"ast":null,"code":"import { all, delay, fork, take, takeEvery, takeLatest, call, put } from \"redux-saga/effects\";\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST } from \"../reducers/user\";\n\nfunction loginAPI() {// 서버에 요청을 보내는 부분\n}\n\nfunction* login() {\n  try {\n    yield call(loginAPI); // 함수 동기적 호출\n\n    yield put({\n      // put은 dispatch와 동일\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  // 로그인 액션이 실행되면 중단점이 풀리고 로그인 성공 액션을 실행한다\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin) // 함수 비동기적 호출\n  ]);\n}","map":{"version":3,"sources":["D:\\이정걸\\web\\react_nodebird\\frontend\\sagas\\user.js"],"names":["all","delay","fork","take","takeEvery","takeLatest","call","put","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","loginAPI","login","type","e","console","error","watchLogin","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,IAA3B,EAAiCC,SAAjC,EAA4CC,UAA5C,EAAwDC,IAAxD,EAA8DC,GAA9D,QAAyE,oBAAzE;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,EAAiDC,cAAjD,QAAuE,kBAAvE;;AAEA,SAASC,QAAT,GAAoB,CAClB;AACD;;AAED,UAAUC,KAAV,GAAkB;AAChB,MAAI;AACF,UAAMP,IAAI,CAACM,QAAD,CAAV,CADE,CACoB;;AACtB,UAAML,GAAG,CAAC;AACR;AACAO,MAAAA,IAAI,EAAEL;AAFE,KAAD,CAAT;AAID,GAND,CAME,OAAOM,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMR,GAAG,CAAC;AACRO,MAAAA,IAAI,EAAEJ;AADE,KAAD,CAAT;AAGD;AACF;;AAED,UAAUQ,UAAV,GAAuB;AACrB;AACA,QAAMd,SAAS,CAACO,cAAD,EAAiBE,KAAjB,CAAf;AACD;;AAED,eAAe,UAAUM,QAAV,GAAqB;AAClC,QAAMnB,GAAG,CAAC,CACRE,IAAI,CAACgB,UAAD,CADI,CACS;AADT,GAAD,CAAT;AAGD","sourcesContent":["import { all, delay, fork, take, takeEvery, takeLatest, call, put } from \"redux-saga/effects\";\r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST } from \"../reducers/user\";\r\n\r\nfunction loginAPI() {\r\n  // 서버에 요청을 보내는 부분\r\n}\r\n\r\nfunction* login() {\r\n  try {\r\n    yield call(loginAPI); // 함수 동기적 호출\r\n    yield put({\r\n      // put은 dispatch와 동일\r\n      type: LOG_IN_SUCCESS\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  // 로그인 액션이 실행되면 중단점이 풀리고 로그인 성공 액션을 실행한다\r\n  yield takeEvery(LOG_IN_REQUEST, login)\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogin) // 함수 비동기적 호출\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}