{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { Button, Card, Avatar, Icon, Form, Input, Comment, List } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport Link from \"next/link\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST } from \"../reducers/post\";\nimport PostImages from \"./PostImages\";\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState(\"\");\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    commentAdded,\n    isAddingComment\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev); //열렸으면 닫고, 닫혔으면 열고..\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n\n    if (!me) {\n      return alert(\"로그인이 필요합니다.\");\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(() => {\n    setCommentText(\"\");\n  }, [commentAdded === true]);\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n  const onToggleLike = useCallback(() => {\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    }\n\n    if (liked) {\n      // 좋아요를 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      // 좋아요를 안 누른 상태 \n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n  const onRetweet = useCallback(() => {\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me && me.id, post.id]);\n  return __jsx(\"div\", null, __jsx(Card, {\n    style: {\n      marginTop: \"10px\"\n    },\n    key: +post.createdAt,\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      onClick: onRetweet\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      theme: liked ? 'twoTone' : 'outlined',\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\"\n    })],\n    extra: __jsx(Button, null, \"\\uD314\\uB85C\\uC6B0\")\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: \"/user\",\n        query: {\n          id: post.User.id\n        }\n      },\n      as: `/user/${post.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(\"div\", null, post.content.split(/(#[^\\s]+)/g).map(v => {\n      // 해시태그의 링크넣기 -> a tag가 아닌 next의 Link를 써야 spa 가 유지가 된다\n      if (v.match(/#[^\\s]+/)) {\n        return __jsx(Link, {\n          href: {\n            pathname: \"/hashtag\",\n            query: {\n              tag: v.slice(1)\n            }\n          },\n          as: `/hashtag/${v.slice(1)}`,\n          key: v\n        }, __jsx(\"a\", null, v));\n      }\n\n      return v;\n    }))\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: `${post.Comments ? post.Comments.length : 0} 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: item => __jsx(\"li\", null, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Link, {\n        href: {\n          pathname: \"/user\",\n          query: {\n            id: item.User.id\n          }\n        },\n        as: `/user/${item.User.id}`\n      }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n      content: item.content\n    }))\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["D:\\이정걸\\web\\react_nodebird\\frontend\\components\\PostCard.js"],"names":["React","useState","useCallback","useEffect","Button","Card","Avatar","Icon","Form","Input","Comment","List","PropTypes","Link","useSelector","useDispatch","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_REQUEST","RETWEET_REQUEST","PostImages","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","me","state","user","commentAdded","isAddingComment","dispatch","liked","Likers","find","v","id","onToggleComment","prev","type","data","onSubmitComment","e","preventDefault","alert","postId","content","onChangeCommentText","target","value","onToggleLike","onRetweet","marginTop","createdAt","Images","pathname","query","User","nickname","split","map","match","tag","slice","Comments","length","item","propTypes","shape","object","string","img"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\r\nimport { Button, Card, Avatar, Icon, Form, Input, Comment, List } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport Link from \"next/link\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST } from \"../reducers/post\";\r\nimport PostImages from \"./PostImages\";\r\n\r\nconst PostCard = ({ post }) => {\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState(\"\");\r\n  const { me } = useSelector(state => state.user);\r\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n  const dispatch = useDispatch();\r\n\r\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentFormOpened(prev => !prev); //열렸으면 닫고, 닫혔으면 열고..\r\n    if (!commentFormOpened) {\r\n      dispatch({\r\n        type: LOAD_COMMENTS_REQUEST,\r\n        data: post.id,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const onSubmitComment = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      if (!me) {\r\n        return alert(\"로그인이 필요합니다.\");\r\n      }\r\n      return dispatch({\r\n        type: ADD_COMMENT_REQUEST,\r\n        data: {\r\n          postId: post.id,\r\n          content: commentText,\r\n        },\r\n      });\r\n    },\r\n    [me && me.id, commentText]\r\n  );\r\n\r\n  useEffect(() => {\r\n    setCommentText(\"\");\r\n  }, [commentAdded === true]);\r\n\r\n  const onChangeCommentText = useCallback(e => {\r\n    setCommentText(e.target.value);\r\n  }, []);\r\n\r\n  const onToggleLike = useCallback(() => {\r\n    if (!me) {\r\n      return alert('로그인이 필요합니다');\r\n    }\r\n    if (liked) { // 좋아요를 누른 상태\r\n      dispatch({\r\n        type: UNLIKE_POST_REQUEST,\r\n        data: post.id,\r\n      })\r\n    } else { // 좋아요를 안 누른 상태 \r\n      dispatch({\r\n        type: LIKE_POST_REQUEST,\r\n        data: post.id,\r\n      });\r\n    }\r\n  }, [me && me.id, post && post.id, liked]);\r\n\r\n  const onRetweet = useCallback(() => {\r\n    if (!me) {\r\n      return alert('로그인이 필요합니다');\r\n    }\r\n    return dispatch({\r\n      type: RETWEET_REQUEST,\r\n      data: post.id, \r\n    })\r\n  }, [me && me.id, post.id]);\r\n\r\n  return (\r\n    <div>\r\n      <Card\r\n        style={{ marginTop: \"10px\" }}\r\n        key={+post.createdAt}\r\n        cover={post.Images[0] && <PostImages images={post.Images} />}\r\n        actions={[\r\n          <Icon type=\"retweet\" key=\"retweet\" onClick={onRetweet} />,\r\n          <Icon type=\"heart\" key=\"heart\" theme={liked ? 'twoTone' : 'outlined' } twoToneColor=\"#eb2f96\" onClick={onToggleLike} />,\r\n          <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\r\n          <Icon type=\"ellipsis\" key=\"ellipsis\" />\r\n        ]}\r\n        extra={<Button>팔로우</Button>}\r\n      >\r\n        <Card.Meta\r\n          avatar={(\r\n            <Link href={{ pathname: \"/user\", query: { id: post.User.id } }} as={`/user/${post.User.id}`}>\r\n              <a>\r\n                <Avatar>{post.User.nickname[0]}</Avatar>\r\n              </a>\r\n            </Link>\r\n          )}\r\n          title={post.User.nickname}\r\n          description={\r\n            <div>\r\n              {post.content.split(/(#[^\\s]+)/g).map(v => {\r\n                // 해시태그의 링크넣기 -> a tag가 아닌 next의 Link를 써야 spa 가 유지가 된다\r\n                if (v.match(/#[^\\s]+/)) {\r\n                  return (\r\n                    <Link\r\n                      href={{\r\n                        pathname: \"/hashtag\",\r\n                        query: { tag: v.slice(1) }\r\n                      }}\r\n                      as={`/hashtag/${v.slice(1)}`}\r\n                      key={v}\r\n                    >\r\n                      <a>{v}</a>\r\n                    </Link>\r\n                  );\r\n                }\r\n                return v;\r\n              })}\r\n            </div>\r\n          }\r\n        />\r\n      </Card>\r\n      {commentFormOpened && (\r\n        <>\r\n          <Form onSubmit={onSubmitComment}>\r\n            <Form.Item>\r\n              <Input.TextArea\r\n                rows={4}\r\n                value={commentText}\r\n                onChange={onChangeCommentText}\r\n              />\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>\r\n              삐약\r\n            </Button>\r\n          </Form>\r\n          <List\r\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || []}\r\n            renderItem={item => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={\r\n                    <Link\r\n                      href={{ pathname: \"/user\", query: { id: item.User.id } }}\r\n                      as={`/user/${item.User.id}`}\r\n                    >\r\n                      <a>\r\n                        <Avatar>{item.User.nickname[0]}</Avatar>\r\n                      </a>\r\n                    </Link>\r\n                  }\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    img: PropTypes.string,\r\n    createdAt: PropTypes.object\r\n  })\r\n};\r\n\r\nexport default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}