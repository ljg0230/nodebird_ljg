{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPostAPI),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addCommnetAPI),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addCommnet),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddCommnet),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, put, delay, takeLatest, takeEvery, call } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from \"../reducers/post\";\n\nfunction addPostAPI(postData) {\n  return _regeneratorRuntime.wrap(function addPostAPI$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", axios.post(\"/api/post\", postData, {\n            withCredentials: true // 로그인한 사용자만 가능하게 쿠키\n\n          }));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context2.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction addCommnetAPI() {\n  return _regeneratorRuntime.wrap(function addCommnetAPI$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction addCommnet(action) {\n  return _regeneratorRuntime.wrap(function addCommnet$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context5.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId\n            }\n          });\n\n        case 5:\n          _context5.next = 11;\n          break;\n\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context5.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 7]]);\n}\n\nfunction watchAddCommnet() {\n  return _regeneratorRuntime.wrap(function watchAddCommnet$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addCommnet);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchAddPost), fork(watchAddCommnet)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["D:\\이정걸\\web\\react_nodebird\\frontend\\sagas\\post.js"],"names":["addPostAPI","addPost","watchAddPost","addCommnetAPI","addCommnet","watchAddCommnet","postSaga","all","fork","put","delay","takeLatest","takeEvery","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","postData","post","withCredentials","action","data","result","type","error","postId"],"mappings":";;;;yBAmBUA,U;;;yBAMAC,O;;;yBAeAC,Y;;;yBAIAC,a;;;yBAEAC,U;;;yBAkBAC,e;;;yBAIeC,Q;;AApEzB,SACEC,GADF,EAEEC,IAFF,EAGEC,GAHF,EAIEC,KAJF,EAKEC,UALF,EAMEC,SANF,EAOEC,IAPF,QAQO,oBARP;AASA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,gBADF,EAEEC,gBAFF,EAGEC,gBAHF,EAIEC,mBAJF,EAKEC,mBALF,EAMEC,mBANF,QAOO,kBAPP;;AASA,SAAUpB,UAAV,CAAqBqB,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA,2CACSP,KAAK,CAACQ,IAAN,CAAW,WAAX,EAAwBD,QAAxB,EAAkC;AACvCE,YAAAA,eAAe,EAAE,IADsB,CAChB;;AADgB,WAAlC,CADT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,SAAUtB,OAAV,CAAkBuB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMX,IAAI,CAACb,UAAD,EAAawB,MAAM,CAACC,IAApB,CAAV;;AAFnB;AAEUC,UAAAA,MAFV;AAAA;AAGI,iBAAMjB,GAAG,CAAC;AACRkB,YAAAA,IAAI,EAAEX,gBADE;AAERS,YAAAA,IAAI,EAAEC,MAAM,CAACD;AAFL,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQI,iBAAMhB,GAAG,CAAC;AACRkB,YAAAA,IAAI,EAAEV,gBADE;AAERW,YAAAA,KAAK;AAFG,WAAD,CAAT;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAU1B,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMS,UAAU,CAACI,gBAAD,EAAmBd,OAAnB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUE,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA,SAAUC,UAAV,CAAqBoB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMd,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAMD,GAAG,CAAC;AACRkB,YAAAA,IAAI,EAAER,mBADE;AAERM,YAAAA,IAAI,EAAE;AACJI,cAAAA,MAAM,EAAEL,MAAM,CAACC,IAAP,CAAYI;AADhB;AAFE,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAWI,iBAAMpB,GAAG,CAAC;AACRkB,YAAAA,IAAI,EAAEP,mBADE;AAERQ,YAAAA,KAAK;AAFG,WAAD,CAAT;;AAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAUvB,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,UAAU,CAACO,mBAAD,EAAsBd,UAAtB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACN,YAAD,CAAL,EAAqBM,IAAI,CAACH,eAAD,CAAzB,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\r\n  all,\r\n  fork,\r\n  put,\r\n  delay,\r\n  takeLatest,\r\n  takeEvery,\r\n  call,\r\n} from \"redux-saga/effects\";\r\nimport axios from 'axios';\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE\r\n} from \"../reducers/post\";\r\n\r\nfunction* addPostAPI(postData) {\r\n  return axios.post(\"/api/post\", postData, {\r\n    withCredentials: true, // 로그인한 사용자만 가능하게 쿠키\r\n  });\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data)\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* addCommnetAPI() {}\r\n\r\nfunction* addCommnet(action) {\r\n  //saga도 액션 데이터를 받을 수 있다 여기 액션 데이터는 PostCard 의 onSubmitComment 에서 보낸다\r\n  try {\r\n    yield delay(2000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: {\r\n        postId: action.data.postId,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddCommnet() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addCommnet);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchAddCommnet)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}