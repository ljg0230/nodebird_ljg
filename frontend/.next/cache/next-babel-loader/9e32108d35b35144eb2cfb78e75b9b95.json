{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, Avatar } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { LOAD_USER_POSTS_REQUEST } from \"../reducers/post\";\nimport { LOAD_USER_REQUEST } from \"../reducers/user\";\nimport PostCard from \"../components/PostCard\";\n\nconst User = ({\n  id\n}) => {\n  const dispatch = useDispatch();\n  const {\n    mainPosts\n  } = useSelector(state => state.post);\n  const {\n    userInfo\n  } = useSelector(state => state.user);\n  useEffect(() => {\n    dispatch({\n      type: LOAD_USER_REQUEST,\n      data: id\n    });\n    dispatch({\n      type: LOAD_USER_POSTS_REQUEST,\n      data: id\n    });\n  }, []);\n  return __jsx(\"div\", null, userInfo ? __jsx(Card, {\n    actions: [__jsx(\"div\", {\n      key: \"twit\"\n    }, \"\\uC9F9\\uC9F9!\", __jsx(\"br\", null), userInfo.Posts), __jsx(\"div\", {\n      key: \"following\"\n    }, \"\\uD314\\uB85C\\uC789\", __jsx(\"br\", null), userInfo.Followings), __jsx(\"div\", {\n      key: \"follower\"\n    }, \"\\uD314\\uB85C\\uC6CC\", __jsx(\"br\", null), userInfo.Followers)]\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, null, userInfo.nickname[0]),\n    title: userInfo.nickname\n  })) : null, mainPosts.map(c => __jsx(PostCard, {\n    key: +c.createdAt,\n    post: c\n  })));\n};\n\nUser.propTypes = {\n  id: PropTypes.number.isRequired\n};\n\nUser.getInitialProps = async context => {\n  console.log(\"user getInitialProps\", context.query.id);\n  return {\n    id: _parseInt(context.query.id, 10)\n  }; // 서버에서 받은 데이터를 다시 프론트의 props로 전달\n};\n\nexport default User;","map":{"version":3,"sources":["D:\\이정걸\\web\\react_nodebird\\frontend\\pages\\user.js"],"names":["React","useEffect","PropTypes","Card","Avatar","useDispatch","useSelector","LOAD_USER_POSTS_REQUEST","LOAD_USER_REQUEST","PostCard","User","id","dispatch","mainPosts","state","post","userInfo","user","type","data","Posts","Followings","Followers","nickname","map","c","createdAt","propTypes","number","isRequired","getInitialProps","context","console","log","query"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,MAA7B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,uBAAT,QAAwC,kBAAxC;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAY;AACvB,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAgBP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAjC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAeV,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACG,IAAhB,CAAhC;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEV,iBADD;AAELW,MAAAA,IAAI,EAAER;AAFD,KAAD,CAAR;AAIAC,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEX,uBADC;AAEPY,MAAAA,IAAI,EAAER;AAFC,KAAD,CAAR;AAID,GATQ,EASN,EATM,CAAT;AAUA,SACE,mBACGK,QAAQ,GACP,MAAC,IAAD;AACE,IAAA,OAAO,EAAE,CACP;AAAK,MAAA,GAAG,EAAC;AAAT,wBAEE,iBAFF,EAGGA,QAAQ,CAACI,KAHZ,CADO,EAMP;AAAK,MAAA,GAAG,EAAC;AAAT,6BAEE,iBAFF,EAGGJ,QAAQ,CAACK,UAHZ,CANO,EAWP;AAAK,MAAA,GAAG,EAAC;AAAT,6BAEE,iBAFF,EAGGL,QAAQ,CAACM,SAHZ,CAXO;AADX,KAmBE,MAAC,IAAD,CAAM,IAAN;AACE,IAAA,MAAM,EAAE,MAAC,MAAD,QAASN,QAAQ,CAACO,QAAT,CAAkB,CAAlB,CAAT,CADV;AAEE,IAAA,KAAK,EAAEP,QAAQ,CAACO;AAFlB,IAnBF,CADO,GAyBL,IA1BN,EA2BGV,SAAS,CAACW,GAAV,CAAcC,CAAC,IACd,MAAC,QAAD;AAAU,IAAA,GAAG,EAAE,CAACA,CAAC,CAACC,SAAlB;AAA6B,IAAA,IAAI,EAAED;AAAnC,IADD,CA3BH,CADF;AAiCD,CAhDD;;AAkDAf,IAAI,CAACiB,SAAL,GAAiB;AACfhB,EAAAA,EAAE,EAAET,SAAS,CAAC0B,MAAV,CAAiBC;AADN,CAAjB;;AAIAnB,IAAI,CAACoB,eAAL,GAAuB,MAAMC,OAAN,IAAiB;AACtCC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,OAAO,CAACG,KAAR,CAAcvB,EAAlD;AACA,SAAO;AAAEA,IAAAA,EAAE,EAAE,UAASoB,OAAO,CAACG,KAAR,CAAcvB,EAAvB,EAA2B,EAA3B;AAAN,GAAP,CAFsC,CAES;AAChD,CAHD;;AAKA,eAAeD,IAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Card, Avatar } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { LOAD_USER_POSTS_REQUEST } from \"../reducers/post\";\r\nimport { LOAD_USER_REQUEST } from \"../reducers/user\";\r\nimport PostCard from \"../components/PostCard\";\r\n\r\nconst User = ({ id }) => {\r\n  const dispatch = useDispatch();\r\n  const { mainPosts } = useSelector(state => state.post);\r\n  const { userInfo } = useSelector(state => state.user);\r\n\r\n  useEffect(() => {\r\n    dispatch({\r\n        type: LOAD_USER_REQUEST,\r\n        data: id,\r\n    })\r\n    dispatch({\r\n      type: LOAD_USER_POSTS_REQUEST,\r\n      data: id,\r\n    });\r\n  }, []);\r\n  return (\r\n    <div>\r\n      {userInfo ? (\r\n        <Card\r\n          actions={[\r\n            <div key=\"twit\">\r\n              짹짹!\r\n              <br />\r\n              {userInfo.Posts}\r\n            </div>,\r\n            <div key=\"following\">\r\n              팔로잉\r\n              <br />\r\n              {userInfo.Followings}\r\n            </div>,\r\n            <div key=\"follower\">\r\n              팔로워\r\n              <br />\r\n              {userInfo.Followers}\r\n            </div>\r\n          ]}\r\n        >\r\n          <Card.Meta\r\n            avatar={<Avatar>{userInfo.nickname[0]}</Avatar>}\r\n            title={userInfo.nickname}\r\n          />\r\n        </Card>\r\n      ) : null}\r\n      {mainPosts.map(c => (\r\n        <PostCard key={+c.createdAt} post={c} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nUser.propTypes = {\r\n  id: PropTypes.number.isRequired\r\n};\r\n\r\nUser.getInitialProps = async context => {\r\n  console.log(\"user getInitialProps\", context.query.id);\r\n  return { id: parseInt(context.query.id, 10) }; // 서버에서 받은 데이터를 다시 프론트의 props로 전달\r\n};\r\n\r\nexport default User;\r\n"]},"metadata":{},"sourceType":"module"}