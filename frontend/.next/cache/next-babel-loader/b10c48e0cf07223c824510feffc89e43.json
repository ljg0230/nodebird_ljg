{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signUp),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, delay, fork, take, takeEvery, takeLatest, call, put } from \"redux-saga/effects\";\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user\"; //#region api/watch/watch동작 이 세개의 함수가 하나의 사이클(패턴)을 이루게끔 만들자\n\nfunction loginAPI() {// 서버에 요청을 보내는 부분\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            // put은 dispatch와 동일\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} //#endregion\n\n\nfunction signUpAPI() {// 서버에 요청을 보내는 부분\n}\n\nfunction signUp() {\n  return _regeneratorRuntime.wrap(function signUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            // put은 dispatch와 동일\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 12;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), // 함수 비동기적 호출\n          fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["D:\\git\\react_nodebird\\nodebird_ljg\\frontend\\sagas\\user.js"],"names":["login","watchLogin","signUp","watchSignUp","userSaga","all","delay","fork","take","takeEvery","takeLatest","call","put","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","loginAPI","type","console","error","signUpAPI"],"mappings":";;;;yBAQUA,K;;;yBAgBAC,U;;;yBAUAC,M;;;yBAgBAC,W;;;yBAIeC,Q;;AAtDzB,SAASC,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,IAA3B,EAAiCC,SAAjC,EAA4CC,UAA5C,EAAwDC,IAAxD,EAA8DC,GAA9D,QAAyE,oBAAzE;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,EAAyDC,eAAzD,EAA0EC,eAA1E,EAA2FC,eAA3F,QAAkH,kBAAlH,C,CAEA;;AACA,SAASC,QAAT,GAAoB,CAClB;AACD;;AAED,SAAUnB,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMM,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAMM,GAAG,CAAC;AACR;AACAQ,YAAAA,IAAI,EAAEP;AAFE,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AASIQ,UAAAA,OAAO,CAACC,KAAR;AATJ;AAUI,iBAAMV,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAAEN;AADE,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUb,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEE,iBAAMQ,SAAS,CAACM,cAAD,EAAiBf,KAAjB,CAAf;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;;;AAEA,SAASuB,SAAT,GAAqB,CACnB;AACD;;AAED,SAAUrB,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMI,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAMM,GAAG,CAAC;AACR;AACAQ,YAAAA,IAAI,EAAEH;AAFE,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AASII,UAAAA,OAAO,CAACC,KAAR;AATJ;AAUI,iBAAMV,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAAEF;AADE,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUf,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,SAAS,CAACO,eAAD,EAAkBd,MAAlB,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRE,IAAI,CAACN,UAAD,CADI,EACU;AAClBM,UAAAA,IAAI,CAACJ,WAAD,CAFI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, delay, fork, take, takeEvery, takeLatest, call, put } from \"redux-saga/effects\";\r\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user\";\r\n\r\n//#region api/watch/watch동작 이 세개의 함수가 하나의 사이클(패턴)을 이루게끔 만들자\r\nfunction loginAPI() {\r\n  // 서버에 요청을 보내는 부분\r\n}\r\n\r\nfunction* login() {\r\n  try {\r\n    //yield call(loginAPI); // 함수 동기적 호출\r\n    yield delay(2000);\r\n    yield put({\r\n      // put은 dispatch와 동일\r\n      type: LOG_IN_SUCCESS\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  // 로그인 액션이 실행되면 중단점이 풀리고 로그인 성공 액션을 실행한다\r\n  yield takeEvery(LOG_IN_REQUEST, login)\r\n}\r\n//#endregion\r\n\r\nfunction signUpAPI() {\r\n  // 서버에 요청을 보내는 부분\r\n}\r\n\r\nfunction* signUp() {\r\n  try {\r\n    //yield call(signUpAPI); // 함수 동기적 호출\r\n    yield delay(2000);\r\n    yield put({\r\n      // put은 dispatch와 동일\r\n      type: SIGN_UP_SUCCESS\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeEvery(SIGN_UP_REQUEST, signUp)\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogin), // 함수 비동기적 호출\r\n    fork(watchSignUp),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}