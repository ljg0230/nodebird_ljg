{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar dummyUser = {\n  nickname: \"이정걸\",\n  Post: [],\n  Followings: [],\n  Followers: [],\n  signUpData: {}\n};\nexport var initialState = {\n  isLoggedIn: false,\n  user: null\n}; //액션의 이름\n\nexport var SIGN_UP = \"SIGN_UP\";\nexport var SIGN_UP_SUCCESS = \"SIGN_UP_SUCCESS\";\nexport var LOG_IN = \"LOG_IN\";\nexport var LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\nexport var LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\nexport var LOG_OUT = \"LOG_OUT\";\nexport var signUpAction = function signUpAction(data) {\n  // 동적 데이터 처리를 위해 함수로 만든다\n  return {\n    type: SIGN_UP,\n    data: data\n  };\n};\nexport var signUpSuccess = {\n  type: SIGN_UP_SUCCESS\n};\nexport var loginAction = {\n  type: LOG_IN\n};\nexport var logoutAction = {\n  type: LOG_OUT\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOG_IN:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: true,\n          user: dummyUser\n        });\n      }\n\n    case LOG_OUT:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: false,\n          user: null\n        });\n      }\n\n    case SIGN_UP:\n      {\n        return _objectSpread({}, state, {\n          signUpData: action.data\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:\\이정걸\\web\\react_nodebird\\frontend\\reducers\\user.js"],"names":["dummyUser","nickname","Post","Followings","Followers","signUpData","initialState","isLoggedIn","user","SIGN_UP","SIGN_UP_SUCCESS","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT","signUpAction","data","type","signUpSuccess","loginAction","logoutAction","reducer","state","action"],"mappings":";AAAA,IAAMA,SAAS,GAAG;AAChBC,EAAAA,QAAQ,EAAE,KADM;AAEhBC,EAAAA,IAAI,EAAE,EAFU;AAGhBC,EAAAA,UAAU,EAAE,EAHI;AAIhBC,EAAAA,SAAS,EAAE,EAJK;AAKhBC,EAAAA,UAAU,EAAE;AALI,CAAlB;AAQA,OAAO,IAAMC,YAAY,GAAG;AAC1BC,EAAAA,UAAU,EAAE,KADc;AAE1BC,EAAAA,IAAI,EAAE;AAFoB,CAArB,C,CAKP;;AACA,OAAO,IAAMC,OAAO,GAAG,SAAhB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,MAAM,GAAG,QAAf;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,OAAO,GAAG,SAAhB;AAEP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAU;AAClC;AACA,SAAO;AACLC,IAAAA,IAAI,EAAER,OADD;AAELO,IAAAA,IAAI,EAAEA;AAFD,GAAP;AAIH,CANM;AAQP,OAAO,IAAME,aAAa,GAAG;AACzBD,EAAAA,IAAI,EAAEP;AADmB,CAAtB;AAIP,OAAO,IAAMS,WAAW,GAAG;AACzBF,EAAAA,IAAI,EAAEN;AADmB,CAApB;AAIP,OAAO,IAAMS,YAAY,GAAG;AAC1BH,EAAAA,IAAI,EAAEH;AADoB,CAArB;;AAIP,IAAMO,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBhB,YAAyB;AAAA,MAAXiB,MAAW;;AAChD,UAAQA,MAAM,CAACN,IAAf;AACE,SAAKN,MAAL;AAAa;AACX,iCACKW,KADL;AAEEf,UAAAA,UAAU,EAAE,IAFd;AAGEC,UAAAA,IAAI,EAAER;AAHR;AAKD;;AACD,SAAKc,OAAL;AAAc;AACZ,iCACKQ,KADL;AAEEf,UAAAA,UAAU,EAAE,KAFd;AAGEC,UAAAA,IAAI,EAAE;AAHR;AAKD;;AACD,SAAKC,OAAL;AAAe;AACX,iCACOa,KADP;AAEIjB,UAAAA,UAAU,EAAEkB,MAAM,CAACP;AAFvB;AAIH;;AACD;AAAS;AACP,iCACKM,KADL;AAGD;AAzBH;AA2BD,CA5BD;;AA8BA,eAAeD,OAAf","sourcesContent":["const dummyUser = {\r\n  nickname: \"이정걸\",\r\n  Post: [],\r\n  Followings: [],\r\n  Followers: [],\r\n  signUpData: {},\r\n};\r\n\r\nexport const initialState = {\r\n  isLoggedIn: false,\r\n  user: null,\r\n};\r\n\r\n//액션의 이름\r\nexport const SIGN_UP = \"SIGN_UP\";\r\nexport const SIGN_UP_SUCCESS = \"SIGN_UP_SUCCESS\";\r\nexport const LOG_IN = \"LOG_IN\";\r\nexport const LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\r\nexport const LOG_IN_FAILURE = \"LOG_IN_FAILURE\"; \r\nexport const LOG_OUT = \"LOG_OUT\";\r\n\r\nexport const signUpAction = (data) => {\r\n    // 동적 데이터 처리를 위해 함수로 만든다\r\n    return {\r\n      type: SIGN_UP,\r\n      data: data\r\n    };\r\n}\r\n\r\nexport const signUpSuccess = {\r\n    type: SIGN_UP_SUCCESS,\r\n}\r\n\r\nexport const loginAction = {\r\n  type: LOG_IN,\r\n};\r\n\r\nexport const logoutAction = {\r\n  type: LOG_OUT\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case LOG_IN: {\r\n      return {\r\n        ...state,\r\n        isLoggedIn: true,\r\n        user: dummyUser\r\n      };\r\n    }\r\n    case LOG_OUT: {\r\n      return {\r\n        ...state,\r\n        isLoggedIn: false,\r\n        user: null\r\n      };\r\n    }\r\n    case SIGN_UP : {\r\n        return {\r\n            ...state,\r\n            signUpData: action.data,\r\n        }\r\n    }\r\n    default: {\r\n      return {\r\n        ...state\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}