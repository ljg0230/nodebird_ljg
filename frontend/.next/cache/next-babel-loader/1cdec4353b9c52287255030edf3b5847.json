{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(LoadMainPosts),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadMainPosts),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(LoadUserPosts),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(LoadHashtagPosts),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addComment),\n    _marked10 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddComment),\n    _marked11 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadComments),\n    _marked12 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadComments),\n    _marked13 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(uploadImages),\n    _marked14 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchUploadImages),\n    _marked15 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(likePost),\n    _marked16 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLikePost),\n    _marked17 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(unlikePost),\n    _marked18 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchUnlikePost),\n    _marked19 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(retweet),\n    _marked20 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchRetweet),\n    _marked21 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, put, takeLatest, call } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_REQUEST, LOAD_HASHTAG_SUCCESS, LOAD_HASHTAG_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST } from \"../reducers/post\";\nimport axios from \"axios\";\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction LoadMainPostsAPI() {\n  return axios.get(\"/posts\"); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게 \n}\n\nfunction LoadMainPosts() {\n  var result;\n  return _regeneratorRuntime.wrap(function LoadMainPosts$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(LoadMainPostsAPI);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context3.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchLoadMainPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadMainPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOAD_MAIN_POSTS_REQUEST, LoadMainPosts);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction LoadUserPostsAPI(id) {\n  return axios.get(\"/user/\".concat(id, \"/posts\")); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게\n}\n\nfunction LoadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function LoadUserPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(LoadUserPostsAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context5.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOAD_USER_POSTS_REQUEST, LoadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction LoadHashtagPostsAPI(tag) {\n  return axios.get(\"/hashtag/\".concat(tag)); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게\n}\n\nfunction LoadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function LoadHashtagPosts$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(LoadHashtagPostsAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: LOAD_HASHTAG_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 12;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 12;\n          return put({\n            type: LOAD_HASHTAG_FAILURE,\n            error: _context7.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOAD_HASHTAG_REQUEST, LoadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction addCommentAPI(data) {\n  // data 안에 postId 와 comment 2개라서 이렇게 작성\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId,\n              comment: result.data\n            }\n          });\n\n        case 6:\n          _context9.next = 13;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.error(_context9.t0);\n          _context9.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context9.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction loadCommentsAPI(postId) {\n  // data 안에 postId 하나라서 이렇게 작성\n  return axios.get(\"/post/\".concat(postId, \"/comments\"));\n}\n\nfunction loadComments(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadComments$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(loadCommentsAPI, action.data);\n\n        case 3:\n          result = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n              postId: action.data,\n              comments: result.data\n            }\n          });\n\n        case 6:\n          _context11.next = 12;\n          break;\n\n        case 8:\n          _context11.prev = 8;\n          _context11.t0 = _context11[\"catch\"](0);\n          _context11.next = 12;\n          return put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: _context11.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 8]]);\n}\n\nfunction watchLoadComments() {\n  return _regeneratorRuntime.wrap(function watchLoadComments$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction uploadImagesAPI(formData) {\n  // data 안에 postId 하나라서 이렇게 작성\n  return axios.post(\"/post/images\", formData, {\n    withCredentials: true\n  });\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.prev = 0;\n          _context13.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context13.sent;\n          _context13.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          console.log(\"saga: \" + result.data);\n          _context13.next = 13;\n          break;\n\n        case 9:\n          _context13.prev = 9;\n          _context13.t0 = _context13[\"catch\"](0);\n          _context13.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context13.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13, null, [[0, 9]]);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nfunction likePostAPI(postId) {\n  return axios.post(\"/post/\".concat(postId, \"/like\"), {}, {\n    withCredentials: true\n  });\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.prev = 0;\n          _context15.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context15.sent;\n          _context15.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              userId: result.data.userId\n            }\n          });\n\n        case 6:\n          _context15.next = 13;\n          break;\n\n        case 8:\n          _context15.prev = 8;\n          _context15.t0 = _context15[\"catch\"](0);\n          console.error(_context15.t0);\n          _context15.next = 13;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context15.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15, null, [[0, 8]]);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nfunction unlikePostAPI(postId) {\n  return axios[\"delete\"](\"/post/\".concat(postId, \"/like\"), {\n    withCredentials: true\n  });\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.prev = 0;\n          _context17.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context17.sent;\n          _context17.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              userId: result.data.userId\n            }\n          });\n\n        case 6:\n          _context17.next = 13;\n          break;\n\n        case 8:\n          _context17.prev = 8;\n          _context17.t0 = _context17[\"catch\"](0);\n          console.error(_context17.t0);\n          _context17.next = 13;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context17.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17, null, [[0, 8]]);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n}\n\nfunction retweetAPI(postId) {\n  return axios.post(\"/post/\".concat(postId, \"/retweet\"), {}, {\n    withCredentials: true\n  });\n}\n\nfunction retweet(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function retweet$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.prev = 0;\n          _context19.next = 3;\n          return call(retweetAPI, action.data);\n\n        case 3:\n          result = _context19.sent;\n          _context19.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context19.next = 13;\n          break;\n\n        case 8:\n          _context19.prev = 8;\n          _context19.t0 = _context19[\"catch\"](0);\n          console.error(_context19.t0);\n          _context19.next = 13;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context19.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19, null, [[0, 8]]);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked20);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.next = 2;\n          return all([fork(watchLoadMainPosts), fork(watchAddPost), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet)]);\n\n        case 2:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked21);\n}","map":{"version":3,"sources":["D:\\이정걸\\web\\react_nodebird\\frontend\\sagas\\post.js"],"names":["addPost","watchAddPost","LoadMainPosts","watchLoadMainPosts","LoadUserPosts","watchLoadUserPosts","LoadHashtagPosts","watchLoadHashtagPosts","addComment","watchAddComment","loadComments","watchLoadComments","uploadImages","watchUploadImages","likePost","watchLikePost","unlikePost","watchUnlikePost","retweet","watchRetweet","postSaga","all","fork","put","takeLatest","call","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_REQUEST","LOAD_HASHTAG_SUCCESS","LOAD_HASHTAG_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","axios","addPostAPI","postData","post","withCredentials","action","data","result","type","error","LoadMainPostsAPI","get","LoadUserPostsAPI","id","LoadHashtagPostsAPI","tag","addCommentAPI","postId","content","comment","console","loadCommentsAPI","comments","uploadImagesAPI","formData","log","likePostAPI","userId","unlikePostAPI","retweetAPI"],"mappings":"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","sourcesContent":["import {\r\n  all,\r\n  fork,\r\n  put,\r\n  takeLatest,\r\n  call,\r\n} from \"redux-saga/effects\";\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  LOAD_MAIN_POSTS_REQUEST,\r\n  LOAD_MAIN_POSTS_SUCCESS,\r\n  LOAD_MAIN_POSTS_FAILURE,\r\n  LOAD_HASHTAG_REQUEST,\r\n  LOAD_HASHTAG_SUCCESS,\r\n  LOAD_HASHTAG_FAILURE,\r\n  LOAD_USER_POSTS_REQUEST,\r\n  LOAD_USER_POSTS_SUCCESS,\r\n  LOAD_USER_POSTS_FAILURE,\r\n  LOAD_COMMENTS_REQUEST,\r\n  LOAD_COMMENTS_SUCCESS,\r\n  LOAD_COMMENTS_FAILURE,\r\n  UPLOAD_IMAGES_SUCCESS,\r\n  UPLOAD_IMAGES_FAILURE,\r\n  UPLOAD_IMAGES_REQUEST,\r\n  LIKE_POST_SUCCESS,\r\n  LIKE_POST_FAILURE,\r\n  LIKE_POST_REQUEST,\r\n  UNLIKE_POST_SUCCESS,\r\n  UNLIKE_POST_FAILURE,\r\n  UNLIKE_POST_REQUEST,\r\n  RETWEET_SUCCESS,\r\n  RETWEET_FAILURE,\r\n  RETWEET_REQUEST,\r\n} from \"../reducers/post\";\r\nimport axios from \"axios\";\r\n\r\nfunction addPostAPI(postData) {\r\n  return axios.post('/post', postData, {\r\n    withCredentials: true,\r\n  })\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction LoadMainPostsAPI() {\r\n  return axios.get(\"/posts\"); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게 \r\n}\r\n\r\nfunction* LoadMainPosts() {\r\n  try {\r\n    const result = yield call(LoadMainPostsAPI);\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadMainPosts() {\r\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, LoadMainPosts);\r\n}\r\n\r\nfunction LoadUserPostsAPI(id) {\r\n  return axios.get(`/user/${id}/posts`); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게\r\n}\r\n\r\nfunction* LoadUserPosts(action) {\r\n  try {\r\n    const result = yield call(LoadUserPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_USER_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_USER_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, LoadUserPosts);\r\n}\r\n\r\nfunction LoadHashtagPostsAPI(tag) {\r\n  return axios.get(`/hashtag/${tag}`); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게\r\n}\r\n\r\nfunction* LoadHashtagPosts(action) {\r\n  try {\r\n    const result = yield call(LoadHashtagPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_HASHTAG_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_HASHTAG_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n  yield takeLatest(LOAD_HASHTAG_REQUEST, LoadHashtagPosts);\r\n}\r\n\r\nfunction addCommentAPI(data) { // data 안에 postId 와 comment 2개라서 이렇게 작성\r\n  return axios.post(`/post/${data.postId}/comment`, { content: data.content }, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* addComment(action) {\r\n  //saga도 액션 데이터를 받을 수 있다 여기 액션 데이터는 PostCard 의 onSubmitComment 에서 보낸다\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: {\r\n        postId: action.data.postId,\r\n        comment: result.data,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction loadCommentsAPI(postId) { // data 안에 postId 하나라서 이렇게 작성\r\n  return axios.get(`/post/${postId}/comments`);\r\n}\r\n\r\nfunction* loadComments(action) {\r\n  try {\r\n    const result = yield call(loadCommentsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_COMMENTS_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        comments: result.data\r\n      }\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_COMMENTS_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadComments() {\r\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\r\n}\r\n\r\nfunction uploadImagesAPI(formData) {\r\n  // data 안에 postId 하나라서 이렇게 작성\r\n  return axios.post(\"/post/images\", formData, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n  try {\r\n    const result = yield call(uploadImagesAPI, action.data);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    console.log(\"saga: \"+result.data);\r\n  } catch (e) {\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction likePostAPI(postId) {\r\n  return axios.post(`/post/${postId}/like`, {}, {\r\n    withCredentials: true\r\n  });\r\n}\r\n\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        userId: result.data.userId,\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction unlikePostAPI(postId) {\r\n  return axios.delete(\r\n    `/post/${postId}/like`,\r\n    {\r\n      withCredentials: true\r\n    }\r\n  );\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        userId: result.data.userId\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction retweetAPI(postId) {\r\n  return axios.post(`/post/${postId}/retweet`, {}, {\r\n    withCredentials: true\r\n  });\r\n}\r\n\r\nfunction* retweet(action) {\r\n  try {\r\n    const result = yield call(retweetAPI, action.data);\r\n    yield put({\r\n      type: RETWEET_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: RETWEET_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchRetweet() {\r\n  yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLoadMainPosts),\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchLoadComments),\r\n    fork(watchLoadHashtagPosts),\r\n    fork(watchLoadUserPosts),\r\n    fork(watchUploadImages),\r\n    fork(watchLikePost),\r\n    fork(watchUnlikePost),\r\n    fork(watchRetweet),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}