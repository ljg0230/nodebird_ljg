{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Form, Input, Button } from \"antd\";\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from \"../reducers/post\";\n\nconst PostForm = () => {\n  const dispatch = useDispatch();\n  const {\n    0: text,\n    1: setText\n  } = useState(\"\");\n  const {\n    imagePaths,\n    isAddingPost,\n    postAdded\n  } = useSelector(state => state.post);\n  const imageInput = useRef();\n  useEffect(() => {\n    if (postAdded) {\n      setText(\"\");\n    }\n  }, [postAdded]);\n  const onSubmitForm = useCallback(e => {\n    //props로 들어가면 callback!\n    e.preventDefault();\n\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성하세요.');\n    }\n\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: {\n        content: text\n      }\n    });\n  }, [text]);\n  const onChangeText = useCallback(e => {\n    setText(e.target.value);\n  }, []);\n  const onChangeImages = useCallback(e => {\n    console.log(e.target.files);\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append('image', f); // 첫번째인수(key) 이름으로 서버쪽에서 인식함. spa 유지를 위해 ajax 로 FormData 객체를 쓰고 일일이 이미지를 append 해준다\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  const onRemoveImage = useCallback(index => () => {\n    dispatch({\n      type: REMOVE_IMAGE,\n      index\n    });\n  }, []);\n  return __jsx(Form, {\n    style: {\n      margin: \"20px 0 20px\"\n    },\n    encType: \"multipart/form-data\",\n    onSubmit: onSubmitForm\n  }, __jsx(Input.TextArea, {\n    maxLength: 140,\n    placeholder: \"\\uC5B4\\uB5A4 \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n    value: text,\n    onChange: onChangeText\n  }), __jsx(\"div\", null, __jsx(\"input\", {\n    type: \"file\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages\n  }), __jsx(Button, {\n    onClick: onClickImageUpload\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      float: \"right\"\n    },\n    loading: isAddingPost,\n    htmlType: \"submit\"\n  }, \"\\uC9F9\\uC9F9\")), __jsx(\"div\", null, imagePaths.map((v, i) => __jsx(\"div\", {\n    key: v,\n    style: {\n      display: \"inline-block\"\n    }\n  }, __jsx(\"img\", {\n    src: `http://localhost:3066/${v}`,\n    style: {\n      width: \"200px\"\n    },\n    alt: v\n  }), __jsx(\"div\", null, __jsx(Button, {\n    onClick: onRemoveImage(i)\n  }, \"\\uC81C\\uAC70\"))))));\n};\n\nexport default PostForm;","map":{"version":3,"sources":["D:\\이정걸\\web\\react_nodebird\\frontend\\components\\PostForm.js"],"names":["React","useState","useCallback","useEffect","useRef","useSelector","useDispatch","Form","Input","Button","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","PostForm","dispatch","text","setText","imagePaths","isAddingPost","postAdded","state","post","imageInput","onSubmitForm","e","preventDefault","trim","alert","type","data","content","onChangeText","target","value","onChangeImages","console","log","files","imageFormData","FormData","forEach","call","f","append","onClickImageUpload","current","click","onRemoveImage","index","margin","float","map","v","i","display","width"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from \"../reducers/post\";\r\n\r\nconst PostForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [text, setText] = useState(\"\");\r\n  const { imagePaths, isAddingPost, postAdded } = useSelector(\r\n    state => state.post\r\n  );\r\n  const imageInput = useRef();\r\n\r\n  useEffect(() => {\r\n    if (postAdded) {\r\n      setText(\"\");\r\n    }\r\n  }, [postAdded]);\r\n\r\n  const onSubmitForm = useCallback(e => {\r\n    //props로 들어가면 callback!\r\n    e.preventDefault();\r\n    if (!text || !text.trim()) {\r\n      return alert('게시글을 작성하세요.');\r\n    }\r\n    dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data: {\r\n        content: text,\r\n      }\r\n    });\r\n  }, [text]);\r\n\r\n  const onChangeText = useCallback(e => {\r\n    setText(e.target.value);\r\n  }, []);\r\n\r\n  const onChangeImages = useCallback((e) => {\r\n    console.log(e.target.files);\r\n    const imageFormData = new FormData();\r\n    [].forEach.call(e.target.files, (f) => {\r\n      imageFormData.append('image', f);  // 첫번째인수(key) 이름으로 서버쪽에서 인식함. spa 유지를 위해 ajax 로 FormData 객체를 쓰고 일일이 이미지를 append 해준다\r\n    });\r\n    dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    });\r\n  }, []);\r\n\r\n  const onClickImageUpload = useCallback(() => {\r\n    imageInput.current.click();\r\n  }, [imageInput.current]);\r\n\r\n  const onRemoveImage = useCallback(index => () => {\r\n    dispatch({\r\n      type: REMOVE_IMAGE,\r\n      index,\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Form\r\n      style={{ margin: \"20px 0 20px\" }}\r\n      encType=\"multipart/form-data\"\r\n      onSubmit={onSubmitForm}\r\n    >\r\n      <Input.TextArea\r\n        maxLength={140}\r\n        placeholder=\"어떤 일이 있었나요?\"\r\n        value={text}\r\n        onChange={onChangeText}\r\n      />\r\n      <div>\r\n        <input type=\"file\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n        <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n        <Button\r\n          type=\"primary\"\r\n          style={{ float: \"right\" }}\r\n          loading={isAddingPost}\r\n          htmlType=\"submit\"\r\n        >\r\n          짹짹\r\n        </Button>\r\n      </div>\r\n      <div>\r\n        {imagePaths.map((v, i) => (\r\n          <div key={v} style={{ display: \"inline-block\" }}>\r\n            <img\r\n              src={`http://localhost:3066/${v}`}\r\n              style={{ width: \"200px\" }}\r\n              alt={v}\r\n            />\r\n            <div>\r\n              <Button onClick={onRemoveImage(i)}>제거</Button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n"]},"metadata":{},"sourceType":"module"}