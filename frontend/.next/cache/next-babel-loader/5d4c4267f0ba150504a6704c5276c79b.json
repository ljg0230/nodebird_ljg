{"ast":null,"code":"import { all, fork, takeEvery, takeLatest, call, put } from \"redux-saga/effects\";\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user\";\nimport axios from 'axios';\naxios.defaults.baseURL = 'http://localhost:3066/api'; //#region api/watch/watch동작 이 세개의 함수가 하나의 사이클(패턴)을 이루게끔 만들자\n\nfunction logInAPI(logInData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/user/login\", logInData, {\n    withCredentials: true // 서로 쿠키를 주고 받을 수 있게 만든다\n\n  });\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data); // 함수 동기적 호출\n\n    yield put({\n      // put은 dispatch와 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data // axios의 응답정보는 여기 들어있다\n\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  // 로그인 액션이 실행되면 중단점이 풀리고 로그인 성공 액션을 실행한다\n  yield takeEvery(LOG_IN_REQUEST, logIn);\n} //#endregion\n\n\nfunction logOutAPI() {\n  // 로그아웃은 데이터를 보낼 필요가 없다 \n  return axios.post(\"/user/logout\", {}, {\n    withCredentials: true\n  }); //  '주소 / 데이터 / 설정' -> 인자값 순서 주의 \n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(SIGN_UP_REQUEST, logOut);\n}\n\nfunction loadUserAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.get(\"/user/\", {\n    withCredentials: true\n  }); // get은 데이터를 보내지 않는다 2번째 인자가 설정값\n}\n\nfunction* loadUser() {\n  try {\n    const result = yield call(loadUserAPI);\n    yield put({\n      // put은 dispatch와 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nfunction signUpAPI(signUpData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    yield call(signUpAPI, action.data); // signUpAPI 에 action.data 인자를 넣어준다\n\n    yield put({\n      // put은 dispatch와 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), // 함수 비동기적 호출\n  fork(watchLogOut), fork(watchLoadUser), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["D:\\이정걸\\web\\react_nodebird\\frontend\\sagas\\user.js"],"names":["all","fork","takeEvery","takeLatest","call","put","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","axios","defaults","baseURL","logInAPI","logInData","post","withCredentials","logIn","action","result","data","type","e","console","error","watchLogIn","logOutAPI","logOut","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","watchLogOut","loadUserAPI","get","loadUser","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","watchLoadUser","LOAD_USER_REQUEST","signUpAPI","signUpData","signUp","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeEvery, takeLatest, call, put } from \"redux-saga/effects\";\r\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user\";\r\nimport axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3066/api';\r\n\r\n\r\n//#region api/watch/watch동작 이 세개의 함수가 하나의 사이클(패턴)을 이루게끔 만들자\r\nfunction logInAPI(logInData) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.post(\"/user/login\", logInData, {\r\n    withCredentials: true, // 서로 쿠키를 주고 받을 수 있게 만든다\r\n  });\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    const result = yield call(logInAPI, action.data); // 함수 동기적 호출\r\n    yield put({\r\n      // put은 dispatch와 동일\r\n      type: LOG_IN_SUCCESS,\r\n      data: result.data, // axios의 응답정보는 여기 들어있다\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  // 로그인 액션이 실행되면 중단점이 풀리고 로그인 성공 액션을 실행한다\r\n  yield takeEvery(LOG_IN_REQUEST, logIn);\r\n}\r\n//#endregion\r\n\r\nfunction logOutAPI() {\r\n  // 로그아웃은 데이터를 보낼 필요가 없다 \r\n  return axios.post(\"/user/logout\", {}, {\r\n    withCredentials: true,\r\n  }); //  '주소 / 데이터 / 설정' -> 인자값 순서 주의 \r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    yield call(logOutAPI);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeEvery(SIGN_UP_REQUEST, logOut);\r\n}\r\n\r\nfunction loadUserAPI() {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.get(\"/user/\", {\r\n    withCredentials: true,\r\n  }); // get은 데이터를 보내지 않는다 2번째 인자가 설정값\r\n}\r\n\r\nfunction* loadUser() {\r\n  try {\r\n    const result = yield call(loadUserAPI); \r\n    yield put({\r\n      // put은 dispatch와 동일\r\n      type: LOAD_USER_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOAD_USER_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadUser() {\r\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\r\n}\r\n\r\nfunction signUpAPI(signUpData) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.post('/user/', signUpData);\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    yield call(signUpAPI, action.data);  // signUpAPI 에 action.data 인자를 넣어준다\r\n    yield put({\r\n      // put은 dispatch와 동일\r\n      type: SIGN_UP_SUCCESS\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeEvery(SIGN_UP_REQUEST, signUp)\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogIn), // 함수 비동기적 호출\r\n    fork(watchLogOut),\r\n    fork(watchLoadUser),\r\n    fork(watchSignUp),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}