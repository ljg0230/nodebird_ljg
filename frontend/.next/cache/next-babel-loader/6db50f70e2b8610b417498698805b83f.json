{"ast":null,"code":"import { all, fork, put, takeLatest, call } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_REQUEST, LOAD_HASHTAG_SUCCESS, LOAD_HASHTAG_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST } from \"../reducers/post\";\nimport axios from \"axios\";\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction LoadMainPostsAPI() {\n  return axios.get(\"/posts\"); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게 \n}\n\nfunction* LoadMainPosts() {\n  try {\n    const result = yield call(LoadMainPostsAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, LoadMainPosts);\n}\n\nfunction LoadUserPostsAPI(id) {\n  return axios.get(`/user/${id}/posts`); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게\n}\n\nfunction* LoadUserPosts(action) {\n  try {\n    const result = yield call(LoadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, LoadUserPosts);\n}\n\nfunction LoadHashtagPostsAPI(tag) {\n  return axios.get(`/hashtag/${tag}`); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게\n}\n\nfunction* LoadHashtagPosts(action) {\n  try {\n    const result = yield call(LoadHashtagPostsAPI, action.data);\n    yield put({\n      type: LOAD_HASHTAG_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_REQUEST, LoadHashtagPosts);\n}\n\nfunction addCommentAPI(data) {\n  // data 안에 postId 와 comment 2개라서 이렇게 작성\n  return axios.post(`/post/${data.postId}/comment`, {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  //saga도 액션 데이터를 받을 수 있다 여기 액션 데이터는 PostCard 의 onSubmitComment 에서 보낸다\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId) {\n  // data 안에 postId 하나라서 이렇게 작성\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comments: result.data\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\nfunction uploadImagesAPI(formData) {\n  // data 안에 postId 하나라서 이렇게 작성\n  return axios.post(\"/post/images\", formData, {\n    withCredentials: true\n  });\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n    console.log(\"saga: \" + result.data);\n  } catch (e) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction likePostAPI(postId) {\n  return axios.post(`/post/${postId}/like`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction unlikePostAPI(postId) {\n  return axios.delete(`/post/${postId}/like`, {\n    withCredentials: true\n  });\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction retweetAPI(postId) {\n  return axios.post(`/post/${postId}/retweet`, {\n    withCredentials: true\n  });\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadMainPosts), fork(watchAddPost), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet)]);\n}","map":{"version":3,"sources":["D:\\이정걸\\web\\react_nodebird\\frontend\\sagas\\post.js"],"names":["all","fork","put","takeLatest","call","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_REQUEST","LOAD_HASHTAG_SUCCESS","LOAD_HASHTAG_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","axios","addPostAPI","postData","post","withCredentials","addPost","action","result","data","type","e","error","watchAddPost","LoadMainPostsAPI","get","LoadMainPosts","watchLoadMainPosts","LoadUserPostsAPI","id","LoadUserPosts","watchLoadUserPosts","LoadHashtagPostsAPI","tag","LoadHashtagPosts","watchLoadHashtagPosts","addCommentAPI","postId","content","addComment","comment","console","watchAddComment","loadCommentsAPI","loadComments","comments","watchLoadComments","uploadImagesAPI","formData","uploadImages","log","watchUploadImages","likePostAPI","likePost","userId","watchLikePost","unlikePostAPI","delete","unlikePost","watchUnlikePost","retweetAPI","retweet","watchRetweet","postSaga"],"mappings":"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","sourcesContent":["import {\r\n  all,\r\n  fork,\r\n  put,\r\n  takeLatest,\r\n  call,\r\n} from \"redux-saga/effects\";\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  LOAD_MAIN_POSTS_REQUEST,\r\n  LOAD_MAIN_POSTS_SUCCESS,\r\n  LOAD_MAIN_POSTS_FAILURE,\r\n  LOAD_HASHTAG_REQUEST,\r\n  LOAD_HASHTAG_SUCCESS,\r\n  LOAD_HASHTAG_FAILURE,\r\n  LOAD_USER_POSTS_REQUEST,\r\n  LOAD_USER_POSTS_SUCCESS,\r\n  LOAD_USER_POSTS_FAILURE,\r\n  LOAD_COMMENTS_REQUEST,\r\n  LOAD_COMMENTS_SUCCESS,\r\n  LOAD_COMMENTS_FAILURE,\r\n  UPLOAD_IMAGES_SUCCESS,\r\n  UPLOAD_IMAGES_FAILURE,\r\n  UPLOAD_IMAGES_REQUEST,\r\n  LIKE_POST_SUCCESS,\r\n  LIKE_POST_FAILURE,\r\n  LIKE_POST_REQUEST,\r\n  UNLIKE_POST_SUCCESS,\r\n  UNLIKE_POST_FAILURE,\r\n  UNLIKE_POST_REQUEST,\r\n  RETWEET_SUCCESS,\r\n  RETWEET_FAILURE,\r\n  RETWEET_REQUEST,\r\n} from \"../reducers/post\";\r\nimport axios from \"axios\";\r\n\r\nfunction addPostAPI(postData) {\r\n  return axios.post('/post', postData, {\r\n    withCredentials: true,\r\n  })\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction LoadMainPostsAPI() {\r\n  return axios.get(\"/posts\"); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게 \r\n}\r\n\r\nfunction* LoadMainPosts() {\r\n  try {\r\n    const result = yield call(LoadMainPostsAPI);\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadMainPosts() {\r\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, LoadMainPosts);\r\n}\r\n\r\nfunction LoadUserPostsAPI(id) {\r\n  return axios.get(`/user/${id}/posts`); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게\r\n}\r\n\r\nfunction* LoadUserPosts(action) {\r\n  try {\r\n    const result = yield call(LoadUserPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_USER_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_USER_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, LoadUserPosts);\r\n}\r\n\r\nfunction LoadHashtagPostsAPI(tag) {\r\n  return axios.get(`/hashtag/${tag}`); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게\r\n}\r\n\r\nfunction* LoadHashtagPosts(action) {\r\n  try {\r\n    const result = yield call(LoadHashtagPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_HASHTAG_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_HASHTAG_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n  yield takeLatest(LOAD_HASHTAG_REQUEST, LoadHashtagPosts);\r\n}\r\n\r\nfunction addCommentAPI(data) { // data 안에 postId 와 comment 2개라서 이렇게 작성\r\n  return axios.post(`/post/${data.postId}/comment`, { content: data.content }, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* addComment(action) {\r\n  //saga도 액션 데이터를 받을 수 있다 여기 액션 데이터는 PostCard 의 onSubmitComment 에서 보낸다\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: {\r\n        postId: action.data.postId,\r\n        comment: result.data,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction loadCommentsAPI(postId) { // data 안에 postId 하나라서 이렇게 작성\r\n  return axios.get(`/post/${postId}/comments`);\r\n}\r\n\r\nfunction* loadComments(action) {\r\n  try {\r\n    const result = yield call(loadCommentsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_COMMENTS_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        comments: result.data\r\n      }\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_COMMENTS_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadComments() {\r\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\r\n}\r\n\r\nfunction uploadImagesAPI(formData) {\r\n  // data 안에 postId 하나라서 이렇게 작성\r\n  return axios.post(\"/post/images\", formData, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n  try {\r\n    const result = yield call(uploadImagesAPI, action.data);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    console.log(\"saga: \"+result.data);\r\n  } catch (e) {\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction likePostAPI(postId) {\r\n  return axios.post(`/post/${postId}/like`, {}, {\r\n    withCredentials: true\r\n  });\r\n}\r\n\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        userId: result.data.userId,\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction unlikePostAPI(postId) {\r\n  return axios.delete(\r\n    `/post/${postId}/like`,\r\n    {\r\n      withCredentials: true\r\n    }\r\n  );\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        userId: result.data.userId\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction retweetAPI(postId) {\r\n  return axios.post(`/post/${postId}/retweet`, {\r\n    withCredentials: true\r\n  });\r\n}\r\n\r\nfunction* retweet(action) {\r\n  try {\r\n    const result = yield call(retweetAPI, action.data);\r\n    yield put({\r\n      type: RETWEET_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: RETWEET_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchRetweet() {\r\n  yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLoadMainPosts),\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchLoadComments),\r\n    fork(watchLoadHashtagPosts),\r\n    fork(watchLoadUserPosts),\r\n    fork(watchUploadImages),\r\n    fork(watchLikePost),\r\n    fork(watchUnlikePost),\r\n    fork(watchRetweet),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}