{"ast":null,"code":"import { all, fork, put, delay, takeLatest, takeEvery } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from \"../reducers/post\";\n\nfunction addPostAPI() {}\n\nfunction* addPost() {\n  try {\n    yield delay(2000);\n    yield put({\n      type: ADD_POST_SUCCESS\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction addCommnetAPI() {}\n\nfunction* addCommnet(action) {\n  //saga도 액션 데이터를 받을 수 있다 여기 액션 데이터는 PostCard 의 onSubmitComment 에서 보낸다\n  try {\n    yield delay(2000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddCommnet() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addCommnet);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddCommnet)]);\n}","map":{"version":3,"sources":["D:\\이정걸\\web\\react_nodebird\\frontend\\sagas\\post.js"],"names":["all","fork","put","delay","takeLatest","takeEvery","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPostAPI","addPost","type","e","error","watchAddPost","addCommnetAPI","addCommnet","action","data","postId","watchAddCommnet","postSaga"],"mappings":"AAAA,SACEA,GADF,EAEEC,IAFF,EAGEC,GAHF,EAIEC,KAJF,EAKEC,UALF,EAMEC,SANF,QAOO,oBAPP;AAQA,SACEC,gBADF,EAEEC,gBAFF,EAGEC,gBAHF,EAIEC,mBAJF,EAKEC,mBALF,EAMEC,mBANF,QAOO,kBAPP;;AASA,SAASC,UAAT,GAAsB,CAAE;;AAExB,UAAUC,OAAV,GAAoB;AAClB,MAAI;AACF,UAAMV,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEP;AADE,KAAD,CAAT;AAGD,GALD,CAKE,OAAOQ,CAAP,EAAU;AACV,UAAMb,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEN,gBADE;AAERQ,MAAAA,KAAK,EAAED;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUE,YAAV,GAAyB;AACvB,QAAMb,UAAU,CAACE,gBAAD,EAAmBO,OAAnB,CAAhB;AACD;;AAED,SAASK,aAAT,GAAyB,CAAE;;AAE3B,UAAUC,UAAV,CAAqBC,MAArB,EAA6B;AAC3B;AACA,MAAI;AACF,UAAMjB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEJ,mBADE;AAERW,MAAAA,IAAI,EAAE;AACJC,QAAAA,MAAM,EAAEF,MAAM,CAACC,IAAP,CAAYC;AADhB;AAFE,KAAD,CAAT;AAMD,GARD,CAQE,OAAOP,CAAP,EAAU;AACV,UAAMb,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEH,mBADE;AAERK,MAAAA,KAAK,EAAED;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUQ,eAAV,GAA4B;AAC1B,QAAMnB,UAAU,CAACK,mBAAD,EAAsBU,UAAtB,CAAhB;AACD;;AAED,eAAe,UAAUK,QAAV,GAAqB;AAClC,QAAMxB,GAAG,CAAC,CAACC,IAAI,CAACgB,YAAD,CAAL,EAAqBhB,IAAI,CAACsB,eAAD,CAAzB,CAAD,CAAT;AACD","sourcesContent":["import {\r\n  all,\r\n  fork,\r\n  put,\r\n  delay,\r\n  takeLatest,\r\n  takeEvery\r\n} from \"redux-saga/effects\";\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE\r\n} from \"../reducers/post\";\r\n\r\nfunction addPostAPI() {}\r\n\r\nfunction* addPost() {\r\n  try {\r\n    yield delay(2000);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction addCommnetAPI() {}\r\n\r\nfunction* addCommnet(action) {\r\n  //saga도 액션 데이터를 받을 수 있다 여기 액션 데이터는 PostCard 의 onSubmitComment 에서 보낸다\r\n  try {\r\n    yield delay(2000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: {\r\n        postId: action.data.postId,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddCommnet() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addCommnet);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchAddCommnet)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}