{"ast":null,"code":"import { all, fork, takeEvery, call, put } from \"redux-saga/effects\";\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE } from \"../reducers/user\";\nimport axios from \"axios\"; //#region api/watch/watch동작 이 세개의 함수가 하나의 사이클(패턴)을 이루게끔 만들자\n\nfunction logInAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/user/login\", loginData, {\n    //\n    withCredentials: true // 쿠키를 주고 받는다\n\n  });\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data); // 함수 동기적 호출\n\n    yield put({\n      // put은 dispatch와 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  // 로그인 액션이 실행되면 중단점이 풀리고 로그인 성공 액션을 실행한다\n  yield takeEvery(LOG_IN_REQUEST, logIn);\n} //#endregion\n\n\nfunction signUpAPI(signUpData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/user/\", signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    yield call(signUpAPI, action.data); // signUpAPI 에 action.data 인자를 넣어준다\n\n    yield put({\n      // put은 dispatch와 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/user/logout\", {}, {\n    withCredentials: true\n  }); // logout은 데이터(2번째 인자)가 필요없다. 이미 받은 쿠키를 이용한다\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI); //\n\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI() {\n  return axios.get(\"/user/\", {\n    // get은 데이터를 받지 않으므로 2번째 인자에 바로 설정 인자\n    withCredentials: true\n  });\n}\n\nfunction* loadUser() {\n  try {\n    const result = yield call(loadUserAPI); // 함수 동기적 호출\n\n    yield put({\n      // put은 dispatch와 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data // action.data 로 들어감\n\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  // 로그인 액션이 실행되면 중단점이 풀리고 로그인 성공 액션을 실행한다\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), // 함수 비동기적 호출\n  fork(watchLogOut), fork(watchLoadUser), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["D:\\이정걸\\web\\react_nodebird\\frontend\\sagas\\user.js"],"names":["all","fork","takeEvery","call","put","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","axios","logInAPI","loginData","post","withCredentials","logIn","action","result","data","type","e","console","error","watchLogIn","signUpAPI","signUpData","signUp","watchSignUp","logOutAPI","logOut","watchLogOut","loadUserAPI","get","loadUser","watchLoadUser","userSaga"],"mappings":"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","sourcesContent":["import {\r\n  all,\r\n  fork,\r\n  takeEvery,\r\n  call,\r\n  put\r\n} from \"redux-saga/effects\";\r\nimport {\r\n  LOG_IN_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  LOG_IN_REQUEST,\r\n  LOAD_USER_REQUEST,\r\n  LOAD_USER_SUCCESS,\r\n  LOAD_USER_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n} from \"../reducers/user\";\r\nimport axios from \"axios\";\r\n\r\n\r\n\r\n//#region api/watch/watch동작 이 세개의 함수가 하나의 사이클(패턴)을 이루게끔 만들자\r\nfunction logInAPI(loginData) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.post(\"/user/login\", loginData, {\r\n    //\r\n    withCredentials: true // 쿠키를 주고 받는다\r\n  });\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    const result = yield call(logInAPI, action.data); // 함수 동기적 호출\r\n    yield put({\r\n      // put은 dispatch와 동일\r\n      type: LOG_IN_SUCCESS,\r\n      data: result.data\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  // 로그인 액션이 실행되면 중단점이 풀리고 로그인 성공 액션을 실행한다\r\n  yield takeEvery(LOG_IN_REQUEST, logIn);\r\n}\r\n//#endregion\r\n\r\nfunction signUpAPI(signUpData) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.post(\"/user/\", signUpData);\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    yield call(signUpAPI, action.data); // signUpAPI 에 action.data 인자를 넣어준다\r\n    yield put({\r\n      // put은 dispatch와 동일\r\n      type: SIGN_UP_SUCCESS\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nfunction logOutAPI() {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.post(\r\n    \"/user/logout\",\r\n    {},\r\n    {\r\n      withCredentials: true\r\n    }\r\n  ); // logout은 데이터(2번째 인자)가 필요없다. 이미 받은 쿠키를 이용한다\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    yield call(logOutAPI); //\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction loadUserAPI() {\r\n  return axios.get(\"/user/\", {  // get은 데이터를 받지 않으므로 2번째 인자에 바로 설정 인자\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* loadUser() {\r\n  try {\r\n    const result = yield call(loadUserAPI); // 함수 동기적 호출\r\n    yield put({\r\n      // put은 dispatch와 동일\r\n      type: LOAD_USER_SUCCESS,\r\n      data: result.data, // action.data 로 들어감\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOAD_USER_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadUser() {\r\n  // 로그인 액션이 실행되면 중단점이 풀리고 로그인 성공 액션을 실행한다\r\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogIn), // 함수 비동기적 호출\r\n    fork(watchLogOut),\r\n    fork(watchLoadUser),\r\n    fork(watchSignUp),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}