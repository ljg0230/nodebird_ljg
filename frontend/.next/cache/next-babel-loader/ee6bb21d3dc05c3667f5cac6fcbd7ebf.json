{"ast":null,"code":"import { all, fork, take, takeLatest, call, put } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from \"../reducers/user\";\n\nfunction loginAPI() {// 서버에 요청을 보내는 부분\n}\n\nfunction* login() {\n  try {\n    yield call(loginAPI); // 함수 동기적 호출\n\n    yield put({\n      // put은 dispatch와 동일\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  // 로그인 액션이 실행되면 중단점이 풀리고 로그인 성공 액션을 실행한다\n  yield take(LOG_IN);\n  put({\n    type: LOG_IN_SUCCESS\n  });\n}\n\nexport default function* userSaga() {\n  yield all([watchLogin() // 함수 비동기적 호출\n  ]);\n}\n;","map":{"version":3,"sources":["D:\\이정걸\\web\\react_nodebird\\frontend\\sagas\\user.js"],"names":["all","fork","take","takeLatest","call","put","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","loginAPI","login","type","e","console","error","watchLogin","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,UAA1B,EAAsCC,IAAtC,EAA4CC,GAA5C,QAAuD,oBAAvD;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD;;AAEA,SAASC,QAAT,GAAoB,CAChB;AACH;;AAED,UAAUC,KAAV,GAAkB;AACd,MAAI;AACA,UAAMN,IAAI,CAACK,QAAD,CAAV,CADA,CACsB;;AACtB,UAAMJ,GAAG,CAAC;AAAE;AACRM,MAAAA,IAAI,EAAEJ;AADA,KAAD,CAAT;AAGH,GALD,CAKE,OAAOK,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMP,GAAG,CAAC;AACNM,MAAAA,IAAI,EAAEH;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUO,UAAV,GAAuB;AACnB;AACA,QAAMb,IAAI,CAACI,MAAD,CAAV;AACAD,EAAAA,GAAG,CAAC;AACAM,IAAAA,IAAI,EAAEJ;AADN,GAAD,CAAH;AAGH;;AAED,eAAe,UAAUS,QAAV,GAAqB;AAChC,QAAMhB,GAAG,CAAC,CACNe,UAAU,EADJ,CACQ;AADR,GAAD,CAAT;AAGH;AAAA","sourcesContent":["import { all, fork, take, takeLatest, call, put } from 'redux-saga/effects';\r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from \"../reducers/user\";\r\n\r\nfunction loginAPI() {\r\n    // 서버에 요청을 보내는 부분\r\n}\r\n\r\nfunction* login() {\r\n    try {\r\n        yield call(loginAPI); // 함수 동기적 호출\r\n        yield put({ // put은 dispatch와 동일\r\n            type: LOG_IN_SUCCESS,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    // 로그인 액션이 실행되면 중단점이 풀리고 로그인 성공 액션을 실행한다\r\n    yield take(LOG_IN);\r\n    put({\r\n        type: LOG_IN_SUCCESS,\r\n    });\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        watchLogin(), // 함수 비동기적 호출\r\n    ]);\r\n};"]},"metadata":{},"sourceType":"module"}