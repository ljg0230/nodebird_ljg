{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { Button, Card, Avatar, Icon, Form, Input, Comment, List } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport Link from \"next/link\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ADD_COMMENT_REQUEST } from \"../reducers/post\";\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    }); //열렸으면 닫고, 닫혔으면 열고..\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert(\"로그인이 필요합니다.\");\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, [me && me.id]);\n  useEffect(function () {\n    setCommentText(\"\");\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(\"div\", null, __jsx(Card, {\n    style: {\n      marginTop: \"10px\"\n    },\n    key: +post.createdAt,\n    cover: post.img && __jsx(\"img\", {\n      alt: \"example\",\n      src: post.img\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\"\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\"\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\"\n    })],\n    extra: __jsx(Button, null, \"\\uD314\\uB85C\\uC6B0\")\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, null, __jsx(\"a\", {\n      href: \"/user/\".concat(post.User.id)\n    }, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(\"div\", null, post.content.split(/(#[^\\s]+)/g).map(function (v) {\n      // 해시태그의 링크넣기 -> a tag가 아닌 next의 Link를 써야 spa 가 유지가 된다\n      if (v.match(/#[^\\s]+/)) {\n        return __jsx(Link, {\n          href: \"/hashtag/\".concat(v.slice(1)),\n          key: v\n        }, __jsx(\"a\", null, v));\n      }\n\n      return v;\n    }))\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, null, __jsx(\"a\", {\n          href: \"/user/\".concat(item.User.id)\n        }, __jsx(Avatar, null, item.User.nickname[0]))),\n        content: item.content\n      }));\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["D:\\이정걸\\web\\react_nodebird\\frontend\\components\\PostCard.js"],"names":["React","useState","useCallback","useEffect","Button","Card","Avatar","Icon","Form","Input","Comment","List","PropTypes","Link","useSelector","useDispatch","ADD_COMMENT_REQUEST","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","onToggleComment","prev","onSubmitComment","e","preventDefault","alert","type","data","postId","id","onChangeCommentText","target","value","marginTop","createdAt","img","User","nickname","content","split","map","v","match","slice","Comments","length","item","propTypes","shape","object","string"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\r\nimport { Button, Card, Avatar, Icon, Form, Input, Comment, List } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport Link from \"next/link\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ADD_COMMENT_REQUEST } from \"../reducers/post\";\r\n\r\nconst PostCard = ({ post }) => {\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState(\"\");\r\n  const { me } = useSelector(state => state.user);\r\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n  const dispatch = useDispatch();\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentFormOpened(prev => !prev); //열렸으면 닫고, 닫혔으면 열고..\r\n  }, []);\r\n\r\n  const onSubmitComment = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      if (!me) {\r\n        return alert(\"로그인이 필요합니다.\");\r\n      }\r\n      return dispatch({\r\n        type: ADD_COMMENT_REQUEST,\r\n        data: {\r\n          postId: post.id\r\n        }\r\n      });\r\n    },\r\n    [me && me.id]\r\n  );\r\n\r\n  useEffect(() => {\r\n    setCommentText(\"\");\r\n  }, [commentAdded === true]);\r\n\r\n  const onChangeCommentText = useCallback(e => {\r\n    setCommentText(e.target.value);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Card\r\n        style={{ marginTop: \"10px\" }}\r\n        key={+post.createdAt}\r\n        cover={post.img && <img alt=\"example\" src={post.img} />}\r\n        actions={[\r\n          <Icon type=\"retweet\" key=\"retweet\" />,\r\n          <Icon type=\"heart\" key=\"heart\" />,\r\n          <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\r\n          <Icon type=\"ellipsis\" key=\"ellipsis\" />\r\n        ]}\r\n        extra={<Button>팔로우</Button>}\r\n      >\r\n        <Card.Meta\r\n          avatar={\r\n            <Link>\r\n              <a href={`/user/${post.User.id}`}>\r\n                <Avatar>{post.User.nickname[0]}</Avatar>\r\n              </a>\r\n            </Link>\r\n          }\r\n          title={post.User.nickname}\r\n          description={\r\n            <div>\r\n              {post.content.split(/(#[^\\s]+)/g).map((v) => {\r\n                // 해시태그의 링크넣기 -> a tag가 아닌 next의 Link를 써야 spa 가 유지가 된다\r\n                if (v.match(/#[^\\s]+/)) {\r\n                  return (\r\n                    <Link href={`/hashtag/${v.slice(1)}`} key={v}>\r\n                      <a>{v}</a>\r\n                    </Link>\r\n                  );\r\n                }\r\n                return v;\r\n              })}\r\n            </div>\r\n          }\r\n        />\r\n      </Card>\r\n      {commentFormOpened && (\r\n        <>\r\n          <Form onSubmit={onSubmitComment}>\r\n            <Form.Item>\r\n              <Input.TextArea\r\n                rows={4}\r\n                value={commentText}\r\n                onChange={onChangeCommentText}\r\n              />\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>\r\n              삐약\r\n            </Button>\r\n          </Form>\r\n          <List\r\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || []}\r\n            renderItem={item => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={\r\n                    <Link>\r\n                      <a href={`/user/${item.User.id}`}>\r\n                        <Avatar>{item.User.nickname[0]}</Avatar>\r\n                      </a>\r\n                    </Link>\r\n                  }\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    img: PropTypes.string,\r\n    createdAt: PropTypes.object\r\n  })\r\n};\r\n\r\nexport default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}