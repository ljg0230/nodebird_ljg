{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(LoadMainPosts),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadMainPosts),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(LoadUserPosts),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(LoadHashtagPosts),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addComment),\n    _marked10 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddComment),\n    _marked11 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadComments),\n    _marked12 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadComments),\n    _marked13 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, put, delay, takeLatest, call, takeEvery } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_REQUEST, LOAD_HASHTAG_SUCCESS, LOAD_HASHTAG_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE } from \"../reducers/post\";\nimport axios from \"axios\";\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction LoadMainPostsAPI() {\n  return axios.get(\"/posts\"); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게 \n}\n\nfunction LoadMainPosts() {\n  var result;\n  return _regeneratorRuntime.wrap(function LoadMainPosts$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(LoadMainPostsAPI);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context3.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchLoadMainPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadMainPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOAD_MAIN_POSTS_REQUEST, LoadMainPosts);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction LoadUserPostsAPI(id) {\n  return axios.get(\"/user/\".concat(id, \"/posts\")); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게\n}\n\nfunction LoadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function LoadUserPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(LoadUserPostsAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context5.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOAD_USER_POSTS_REQUEST, LoadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction LoadHashtagPostsAPI(tag) {\n  return axios.get(\"/hashtag/\".concat(tag)); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게\n}\n\nfunction LoadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function LoadHashtagPosts$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(LoadHashtagPostsAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: LOAD_HASHTAG_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 12;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 12;\n          return put({\n            type: LOAD_HASHTAG_FAILURE,\n            error: _context7.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOAD_HASHTAG_REQUEST, LoadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction addCommentAPI(data) {\n  // data 안에 postId 와 comment 2개라서 이렇게 작성\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId,\n              comment: result.data\n            }\n          });\n\n        case 6:\n          _context9.next = 12;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          _context9.next = 12;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context9.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction loadCommentsAPI(postId) {\n  // data 안에 postId 하나라서 이렇게 작성\n  return axios.get(\"/post/\".concat(postId, \"/comments\"));\n}\n\nfunction loadComments(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadComments$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(loadCommentsAPI, action.data);\n\n        case 3:\n          result = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n              postId: action.data,\n              comments: result.data\n            }\n          });\n\n        case 6:\n          _context11.next = 12;\n          break;\n\n        case 8:\n          _context11.prev = 8;\n          _context11.t0 = _context11[\"catch\"](0);\n          _context11.next = 12;\n          return put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: _context11.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 8]]);\n}\n\nfunction watchLoadComments() {\n  return _regeneratorRuntime.wrap(function watchLoadComments$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return all([fork(watchLoadMainPosts), fork(watchAddPost), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts)]);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}","map":{"version":3,"sources":["D:\\이정걸\\web\\react_nodebird\\frontend\\sagas\\post.js"],"names":["addPost","watchAddPost","LoadMainPosts","watchLoadMainPosts","LoadUserPosts","watchLoadUserPosts","LoadHashtagPosts","watchLoadHashtagPosts","addComment","watchAddComment","loadComments","watchLoadComments","postSaga","all","fork","put","delay","takeLatest","call","takeEvery","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_REQUEST","LOAD_HASHTAG_SUCCESS","LOAD_HASHTAG_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","axios","addPostAPI","postData","post","withCredentials","action","data","result","type","error","LoadMainPostsAPI","get","LoadUserPostsAPI","id","LoadHashtagPostsAPI","tag","addCommentAPI","postId","content","comment","loadCommentsAPI","comments"],"mappings":"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","sourcesContent":["import {\r\n  all,\r\n  fork,\r\n  put,\r\n  delay,\r\n  takeLatest,\r\n  call,\r\n  takeEvery,\r\n} from \"redux-saga/effects\";\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  LOAD_MAIN_POSTS_REQUEST,\r\n  LOAD_MAIN_POSTS_SUCCESS,\r\n  LOAD_MAIN_POSTS_FAILURE,\r\n  LOAD_HASHTAG_REQUEST,\r\n  LOAD_HASHTAG_SUCCESS,\r\n  LOAD_HASHTAG_FAILURE,\r\n  LOAD_USER_POSTS_REQUEST,\r\n  LOAD_USER_POSTS_SUCCESS,\r\n  LOAD_USER_POSTS_FAILURE,\r\n  LOAD_COMMENTS_REQUEST,\r\n  LOAD_COMMENTS_SUCCESS,\r\n  LOAD_COMMENTS_FAILURE,\r\n} from \"../reducers/post\";\r\nimport axios from \"axios\";\r\n\r\nfunction addPostAPI(postData) {\r\n  return axios.post('/post', postData, {\r\n    withCredentials: true,\r\n  })\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction LoadMainPostsAPI() {\r\n  return axios.get(\"/posts\"); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게 \r\n}\r\n\r\nfunction* LoadMainPosts() {\r\n  try {\r\n    const result = yield call(LoadMainPostsAPI);\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadMainPosts() {\r\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, LoadMainPosts);\r\n}\r\n\r\nfunction LoadUserPostsAPI(id) {\r\n  return axios.get(`/user/${id}/posts`); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게\r\n}\r\n\r\nfunction* LoadUserPosts(action) {\r\n  try {\r\n    const result = yield call(LoadUserPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_USER_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_USER_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, LoadUserPosts);\r\n}\r\n\r\nfunction LoadHashtagPostsAPI(tag) {\r\n  return axios.get(`/hashtag/${tag}`); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게\r\n}\r\n\r\nfunction* LoadHashtagPosts(action) {\r\n  try {\r\n    const result = yield call(LoadHashtagPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_HASHTAG_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_HASHTAG_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n  yield takeLatest(LOAD_HASHTAG_REQUEST, LoadHashtagPosts);\r\n}\r\n\r\nfunction addCommentAPI(data) { // data 안에 postId 와 comment 2개라서 이렇게 작성\r\n  return axios.post(`/post/${data.postId}/comment`, { content: data.content }, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* addComment(action) {\r\n  //saga도 액션 데이터를 받을 수 있다 여기 액션 데이터는 PostCard 의 onSubmitComment 에서 보낸다\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: {\r\n        postId: action.data.postId,\r\n        comment: result.data,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction loadCommentsAPI(postId) { // data 안에 postId 하나라서 이렇게 작성\r\n  return axios.get(`/post/${postId}/comments`);\r\n}\r\n\r\nfunction* loadComments(action) {\r\n  try {\r\n    const result = yield call(loadCommentsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_COMMENTS_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        comments: result.data\r\n      }\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_COMMENTS_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadComments() {\r\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLoadMainPosts),\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchLoadComments),\r\n    fork(watchLoadHashtagPosts),\r\n    fork(watchLoadUserPosts),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}