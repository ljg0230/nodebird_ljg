{"ast":null,"code":"import { all, fork, put, delay, takeLatest, call, takeEvery } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_REQUEST, LOAD_HASHTAG_SUCCESS, LOAD_HASHTAG_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE } from \"../reducers/post\";\nimport axios from \"axios\";\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction LoadMainPostsAPI() {\n  return axios.get(\"/posts\"); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게 \n}\n\nfunction* LoadMainPosts() {\n  try {\n    const result = yield call(LoadMainPostsAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, LoadMainPosts);\n}\n\nfunction LoadUserPostsAPI(id) {\n  return axios.get(`/user/${id}/posts`); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게\n}\n\nfunction* LoadUserPosts(action) {\n  try {\n    const result = yield call(LoadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, LoadUserPosts);\n}\n\nfunction LoadHashtagPostsAPI(tag) {\n  return axios.get(`/hashtag/${tag}`); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게\n}\n\nfunction* LoadHashtagPosts(action) {\n  try {\n    const result = yield call(LoadHashtagPostsAPI, action.data);\n    yield put({\n      type: LOAD_HASHTAG_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_REQUEST, LoadHashtagPosts);\n}\n\nfunction addCommentAPI(data) {\n  // data 안에 postId 와 comment 2개라서 이렇게 작성\n  return axios.post(`/post/${data.postId}/comment`, {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  //saga도 액션 데이터를 받을 수 있다 여기 액션 데이터는 PostCard 의 onSubmitComment 에서 보낸다\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId) {\n  // data 안에 postId 하나라서 이렇게 작성\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comments: result.data\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadMainPosts), fork(watchAddPost), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts)]);\n}","map":{"version":3,"sources":["D:\\이정걸\\web\\react_nodebird\\frontend\\sagas\\post.js"],"names":["all","fork","put","delay","takeLatest","call","takeEvery","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_REQUEST","LOAD_HASHTAG_SUCCESS","LOAD_HASHTAG_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","axios","addPostAPI","postData","post","withCredentials","addPost","action","result","data","type","e","error","watchAddPost","LoadMainPostsAPI","get","LoadMainPosts","watchLoadMainPosts","LoadUserPostsAPI","id","LoadUserPosts","watchLoadUserPosts","LoadHashtagPostsAPI","tag","LoadHashtagPosts","watchLoadHashtagPosts","addCommentAPI","postId","content","addComment","comment","watchAddComment","loadCommentsAPI","loadComments","comments","watchLoadComments","postSaga"],"mappings":"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","sourcesContent":["import {\r\n  all,\r\n  fork,\r\n  put,\r\n  delay,\r\n  takeLatest,\r\n  call,\r\n  takeEvery,\r\n} from \"redux-saga/effects\";\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  LOAD_MAIN_POSTS_REQUEST,\r\n  LOAD_MAIN_POSTS_SUCCESS,\r\n  LOAD_MAIN_POSTS_FAILURE,\r\n  LOAD_HASHTAG_REQUEST,\r\n  LOAD_HASHTAG_SUCCESS,\r\n  LOAD_HASHTAG_FAILURE,\r\n  LOAD_USER_POSTS_REQUEST,\r\n  LOAD_USER_POSTS_SUCCESS,\r\n  LOAD_USER_POSTS_FAILURE,\r\n  LOAD_COMMENTS_REQUEST,\r\n  LOAD_COMMENTS_SUCCESS,\r\n  LOAD_COMMENTS_FAILURE,\r\n} from \"../reducers/post\";\r\nimport axios from \"axios\";\r\n\r\nfunction addPostAPI(postData) {\r\n  return axios.post('/post', postData, {\r\n    withCredentials: true,\r\n  })\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction LoadMainPostsAPI() {\r\n  return axios.get(\"/posts\"); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게 \r\n}\r\n\r\nfunction* LoadMainPosts() {\r\n  try {\r\n    const result = yield call(LoadMainPostsAPI);\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadMainPosts() {\r\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, LoadMainPosts);\r\n}\r\n\r\nfunction LoadUserPostsAPI(id) {\r\n  return axios.get(`/user/${id}/posts`); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게\r\n}\r\n\r\nfunction* LoadUserPosts(action) {\r\n  try {\r\n    const result = yield call(LoadUserPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_USER_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_USER_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, LoadUserPosts);\r\n}\r\n\r\nfunction LoadHashtagPostsAPI(tag) {\r\n  return axios.get(`/hashtag/${tag}`); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게\r\n}\r\n\r\nfunction* LoadHashtagPosts(action) {\r\n  try {\r\n    const result = yield call(LoadHashtagPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_HASHTAG_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_HASHTAG_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n  yield takeLatest(LOAD_HASHTAG_REQUEST, LoadHashtagPosts);\r\n}\r\n\r\nfunction addCommentAPI(data) { // data 안에 postId 와 comment 2개라서 이렇게 작성\r\n  return axios.post(`/post/${data.postId}/comment`, { content: data.content }, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* addComment(action) {\r\n  //saga도 액션 데이터를 받을 수 있다 여기 액션 데이터는 PostCard 의 onSubmitComment 에서 보낸다\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: {\r\n        postId: action.data.postId,\r\n        comment: result.data,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction loadCommentsAPI(postId) { // data 안에 postId 하나라서 이렇게 작성\r\n  return axios.get(`/post/${postId}/comments`);\r\n}\r\n\r\nfunction* loadComments(action) {\r\n  try {\r\n    const result = yield call(loadCommentsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_COMMENTS_SUCCESS,\r\n      data: {\r\n        postId: action.data,\r\n        comments: result.data\r\n      }\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_COMMENTS_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadComments() {\r\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLoadMainPosts),\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchLoadComments),\r\n    fork(watchLoadHashtagPosts),\r\n    fork(watchLoadUserPosts),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}