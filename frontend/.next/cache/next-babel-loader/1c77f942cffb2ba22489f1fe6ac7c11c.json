{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, take, takeLatest, call, put } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from \"../reducers/user\";\n\nfunction loginAPI() {// 서버에 요청을 보내는 부분\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            // put은 dispatch와 동일\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return take(LOG_IN);\n\n        case 2:\n          put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([watchLogin() // 함수 비동기적 호출\n          ]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n;","map":{"version":3,"sources":["D:\\이정걸\\web\\react_nodebird\\frontend\\sagas\\user.js"],"names":["login","watchLogin","userSaga","all","fork","take","takeLatest","call","put","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","loginAPI","type","console","error"],"mappings":";;;;yBAOUA,K;;;yBAcAC,U;;;yBAQeC,Q;;AA7BzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,UAA1B,EAAsCC,IAAtC,EAA4CC,GAA5C,QAAuD,oBAAvD;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD;;AAEA,SAASC,QAAT,GAAoB,CAChB;AACH;;AAED,SAAUZ,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMO,IAAI,CAACK,QAAD,CAAV;;AAFR;AAAA;AAGQ,iBAAMJ,GAAG,CAAC;AAAE;AACRK,YAAAA,IAAI,EAAEH;AADA,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOQI,UAAAA,OAAO,CAACC,KAAR;AAPR;AAQQ,iBAAMP,GAAG,CAAC;AACNK,YAAAA,IAAI,EAAEF;AADA,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUV,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMI,IAAI,CAACI,MAAD,CAAV;;AAFJ;AAGID,UAAAA,GAAG,CAAC;AACAK,YAAAA,IAAI,EAAEH;AADN,WAAD,CAAH;;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,eAAe,SAAUR,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNF,UAAU,EADJ,CACQ;AADR,WAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAId","sourcesContent":["import { all, fork, take, takeLatest, call, put } from 'redux-saga/effects';\r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from \"../reducers/user\";\r\n\r\nfunction loginAPI() {\r\n    // 서버에 요청을 보내는 부분\r\n}\r\n\r\nfunction* login() {\r\n    try {\r\n        yield call(loginAPI); // 함수 동기적 호출\r\n        yield put({ // put은 dispatch와 동일\r\n            type: LOG_IN_SUCCESS,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    // 로그인 액션이 실행되면 중단점이 풀리고 로그인 성공 액션을 실행한다\r\n    yield take(LOG_IN);\r\n    put({\r\n        type: LOG_IN_SUCCESS,\r\n    });\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        watchLogin(), // 함수 비동기적 호출\r\n    ]);\r\n};"]},"metadata":{},"sourceType":"module"}