{"ast":null,"code":"import { all, fork, put, delay, takeLatest, call, takeEvery } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE } from \"../reducers/post\";\nimport axios from \"axios\";\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction LoadMainPostsAPI() {\n  return axios.get(\"/posts\"); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게 \n}\n\nfunction* LoadMainPosts() {\n  try {\n    const result = yield call(LoadMainPostsAPI, action.data);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, LoadMainPosts);\n}\n\nfunction addCommnetAPI() {}\n\nfunction* addCommnet(action) {\n  //saga도 액션 데이터를 받을 수 있다 여기 액션 데이터는 PostCard 의 onSubmitComment 에서 보낸다\n  try {\n    yield delay(2000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddCommnet() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addCommnet);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadMainPosts), fork(watchAddPost), fork(watchAddCommnet)]);\n}","map":{"version":3,"sources":["D:\\이정걸\\web\\react_nodebird\\frontend\\sagas\\post.js"],"names":["all","fork","put","delay","takeLatest","call","takeEvery","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","axios","addPostAPI","postData","post","withCredentials","addPost","action","result","data","type","e","error","watchAddPost","LoadMainPostsAPI","get","LoadMainPosts","watchLoadMainPosts","addCommnetAPI","addCommnet","postId","watchAddCommnet","postSaga"],"mappings":"AAAA,SACEA,GADF,EAEEC,IAFF,EAGEC,GAHF,EAIEC,KAJF,EAKEC,UALF,EAMEC,IANF,EAOEC,SAPF,QAQO,oBARP;AASA,SACEC,gBADF,EAEEC,gBAFF,EAGEC,gBAHF,EAIEC,mBAJF,EAKEC,mBALF,EAMEC,mBANF,EAOEC,uBAPF,EAQEC,uBARF,EASEC,uBATF,QAUO,kBAVP;AAWA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,CAAoBC,QAApB,EAA8B;AAC5B,SAAOF,KAAK,CAACG,IAAN,CAAW,OAAX,EAAoBD,QAApB,EAA8B;AACnCE,IAAAA,eAAe,EAAE;AADkB,GAA9B,CAAP;AAGD;;AAED,UAAUC,OAAV,CAAkBC,MAAlB,EAA0B;AACxB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMlB,IAAI,CAACY,UAAD,EAAaK,MAAM,CAACE,IAApB,CAAzB;AACA,UAAMtB,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAEjB,gBADE;AAERgB,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOE,CAAP,EAAU;AACV,UAAMxB,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAEhB,gBADE;AAERkB,MAAAA,KAAK,EAAED;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUE,YAAV,GAAyB;AACvB,QAAMxB,UAAU,CAACG,gBAAD,EAAmBc,OAAnB,CAAhB;AACD;;AAED,SAASQ,gBAAT,GAA4B;AAC1B,SAAOb,KAAK,CAACc,GAAN,CAAU,QAAV,CAAP,CAD0B,CACE;AAC7B;;AAED,UAAUC,aAAV,GAA0B;AACxB,MAAI;AACF,UAAMR,MAAM,GAAG,MAAMlB,IAAI,CAACwB,gBAAD,EAAmBP,MAAM,CAACE,IAA1B,CAAzB;AACA,UAAMtB,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAEX,uBADE;AAERU,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOE,CAAP,EAAU;AACV,UAAMxB,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAEV,uBADE;AAERY,MAAAA,KAAK,EAAED;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUM,kBAAV,GAA+B;AAC7B,QAAM5B,UAAU,CAACS,uBAAD,EAA0BkB,aAA1B,CAAhB;AACD;;AAED,SAASE,aAAT,GAAyB,CAAE;;AAE3B,UAAUC,UAAV,CAAqBZ,MAArB,EAA6B;AAC3B;AACA,MAAI;AACF,UAAMnB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAEd,mBADE;AAERa,MAAAA,IAAI,EAAE;AACJW,QAAAA,MAAM,EAAEb,MAAM,CAACE,IAAP,CAAYW;AADhB;AAFE,KAAD,CAAT;AAMD,GARD,CAQE,OAAOT,CAAP,EAAU;AACV,UAAMxB,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAEb,mBADE;AAERe,MAAAA,KAAK,EAAED;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUU,eAAV,GAA4B;AAC1B,QAAMhC,UAAU,CAACM,mBAAD,EAAsBwB,UAAtB,CAAhB;AACD;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAMrC,GAAG,CAAC,CACRC,IAAI,CAAC+B,kBAAD,CADI,EAER/B,IAAI,CAAC2B,YAAD,CAFI,EAGR3B,IAAI,CAACmC,eAAD,CAHI,CAAD,CAAT;AAKD","sourcesContent":["import {\r\n  all,\r\n  fork,\r\n  put,\r\n  delay,\r\n  takeLatest,\r\n  call,\r\n  takeEvery,\r\n} from \"redux-saga/effects\";\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  LOAD_MAIN_POSTS_REQUEST,\r\n  LOAD_MAIN_POSTS_SUCCESS,\r\n  LOAD_MAIN_POSTS_FAILURE,\r\n} from \"../reducers/post\";\r\nimport axios from \"axios\";\r\n\r\nfunction addPostAPI(postData) {\r\n  return axios.post('/post', postData, {\r\n    withCredentials: true,\r\n  })\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: e\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction LoadMainPostsAPI() {\r\n  return axios.get(\"/posts\"); // 로그인을 하지않은 사용자도 메인페이지 게시글을 보이게 \r\n}\r\n\r\nfunction* LoadMainPosts() {\r\n  try {\r\n    const result = yield call(LoadMainPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOAD_MAIN_POSTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadMainPosts() {\r\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, LoadMainPosts);\r\n}\r\n\r\nfunction addCommnetAPI() {}\r\n\r\nfunction* addCommnet(action) {\r\n  //saga도 액션 데이터를 받을 수 있다 여기 액션 데이터는 PostCard 의 onSubmitComment 에서 보낸다\r\n  try {\r\n    yield delay(2000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: {\r\n        postId: action.data.postId,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddCommnet() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addCommnet);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLoadMainPosts),\r\n    fork(watchAddPost),\r\n    fork(watchAddCommnet),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}