{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(logIn),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogIn),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(logOut),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogOut),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadUser),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUser),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signUp),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeEvery, takeLatest, call, put } from \"redux-saga/effects\";\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user\";\nimport axios from 'axios';\naxios.defaults.baseURL = 'http://localhost:3066/api'; //#region api/watch/watch동작 이 세개의 함수가 하나의 사이클(패턴)을 이루게끔 만들자\n\nfunction logInAPI(logInData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/user/login\", logInData, {\n    withCredentials: true // 서로 쿠키를 주고 받을 수 있게 만든다\n\n  });\n}\n\nfunction logIn(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(logInAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            // put은 dispatch와 동일\n            type: LOG_IN_SUCCESS,\n            data: result.data // axios의 응답정보는 여기 들어있다\n\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(LOG_IN_REQUEST, logIn);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} //#endregion\n\n\nfunction logOutAPI() {\n  // 로그아웃은 데이터를 보낼 필요가 없다 \n  return axios.post(\"/user/logout\", {}, {\n    withCredentials: true\n  }); //  '주소 / 데이터 / 설정' -> 인자값 순서 주의 \n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(logOutAPI);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 12;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 12;\n          return put({\n            type: LOG_OUT_FAILURE,\n            error: _context3.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, logOut);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction loadUserAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.get(\"/user/\", {\n    withCredentials: true\n  }); // get은 데이터를 보내지 않는다 2번째 인자가 설정값\n}\n\nfunction loadUser() {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUser$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadUserAPI);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            // put은 dispatch와 동일\n            type: LOAD_USER_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: LOAD_USER_FAILURE,\n            error: _context5.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchLoadUser() {\n  return _regeneratorRuntime.wrap(function watchLoadUser$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(LOAD_USER_REQUEST, loadUser);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction signUpAPI(signUpData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/', signUpData);\n}\n\nfunction signUp(action) {\n  return _regeneratorRuntime.wrap(function signUp$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(signUpAPI, action.data);\n\n        case 3:\n          _context7.next = 5;\n          return put({\n            // put은 dispatch와 동일\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context7.next = 12;\n          break;\n\n        case 7:\n          _context7.prev = 7;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context7.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 7]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchLogIn), // 함수 비동기적 호출\n          fork(watchLogOut), fork(watchLoadUser), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["D:\\이정걸\\web\\react_nodebird\\frontend\\sagas\\user.js"],"names":["logIn","watchLogIn","logOut","watchLogOut","loadUser","watchLoadUser","signUp","watchSignUp","userSaga","all","fork","takeEvery","takeLatest","call","put","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","axios","defaults","baseURL","logInAPI","logInData","post","withCredentials","action","data","result","type","console","error","logOutAPI","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","loadUserAPI","get","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOAD_USER_REQUEST","signUpAPI","signUpData"],"mappings":"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","sourcesContent":["import { all, fork, takeEvery, takeLatest, call, put } from \"redux-saga/effects\";\r\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user\";\r\nimport axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3066/api';\r\n\r\n\r\n//#region api/watch/watch동작 이 세개의 함수가 하나의 사이클(패턴)을 이루게끔 만들자\r\nfunction logInAPI(logInData) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.post(\"/user/login\", logInData, {\r\n    withCredentials: true, // 서로 쿠키를 주고 받을 수 있게 만든다\r\n  });\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    const result = yield call(logInAPI, action.data); // 함수 동기적 호출\r\n    yield put({\r\n      // put은 dispatch와 동일\r\n      type: LOG_IN_SUCCESS,\r\n      data: result.data, // axios의 응답정보는 여기 들어있다\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  // 로그인 액션이 실행되면 중단점이 풀리고 로그인 성공 액션을 실행한다\r\n  yield takeEvery(LOG_IN_REQUEST, logIn);\r\n}\r\n//#endregion\r\n\r\nfunction logOutAPI() {\r\n  // 로그아웃은 데이터를 보낼 필요가 없다 \r\n  return axios.post(\"/user/logout\", {}, {\r\n    withCredentials: true,\r\n  }); //  '주소 / 데이터 / 설정' -> 인자값 순서 주의 \r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    yield call(logOutAPI);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeEvery(SIGN_UP_REQUEST, logOut);\r\n}\r\n\r\nfunction loadUserAPI() {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.get(\"/user/\", {\r\n    withCredentials: true,\r\n  }); // get은 데이터를 보내지 않는다 2번째 인자가 설정값\r\n}\r\n\r\nfunction* loadUser() {\r\n  try {\r\n    const result = yield call(loadUserAPI); \r\n    yield put({\r\n      // put은 dispatch와 동일\r\n      type: LOAD_USER_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOAD_USER_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadUser() {\r\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\r\n}\r\n\r\nfunction signUpAPI(signUpData) {\r\n  // 서버에 요청을 보내는 부분\r\n  return axios.post('/user/', signUpData);\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    yield call(signUpAPI, action.data);  // signUpAPI 에 action.data 인자를 넣어준다\r\n    yield put({\r\n      // put은 dispatch와 동일\r\n      type: SIGN_UP_SUCCESS\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeEvery(SIGN_UP_REQUEST, signUp)\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogIn), // 함수 비동기적 호출\r\n    fork(watchLogOut),\r\n    fork(watchLoadUser),\r\n    fork(watchSignUp),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}