{"ast":null,"code":"import { all, delay, fork, take, takeEvery, takeLatest, call, put } from \"redux-saga/effects\";\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user\"; //#region api/watch/watch동작 이 세개의 함수가 하나의 사이클(패턴)을 이루게끔 만들자\n\nfunction loginAPI() {// 서버에 요청을 보내는 부분\n}\n\nfunction* login() {\n  try {\n    //yield call(loginAPI); // 함수 동기적 호출\n    yield delay(2000);\n    yield put({\n      // put은 dispatch와 동일\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  // 로그인 액션이 실행되면 중단점이 풀리고 로그인 성공 액션을 실행한다\n  yield takeEvery(LOG_IN_REQUEST, login);\n} //#endregion\n\n\nfunction signUpAPI() {// 서버에 요청을 보내는 부분\n}\n\nfunction* signUp() {\n  try {\n    //yield call(signUpAPI); // 함수 동기적 호출\n    yield delay(2000);\n    yield put({\n      // put은 dispatch와 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), // 함수 비동기적 호출\n  fork(watchSignUp)]);\n}","map":{"version":3,"sources":["D:\\git\\react_nodebird\\nodebird_ljg\\frontend\\sagas\\user.js"],"names":["all","delay","fork","take","takeEvery","takeLatest","call","put","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","loginAPI","login","type","e","console","error","watchLogin","signUpAPI","signUp","watchSignUp","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,IAA3B,EAAiCC,SAAjC,EAA4CC,UAA5C,EAAwDC,IAAxD,EAA8DC,GAA9D,QAAyE,oBAAzE;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,EAAyDC,eAAzD,EAA0EC,eAA1E,EAA2FC,eAA3F,QAAkH,kBAAlH,C,CAEA;;AACA,SAASC,QAAT,GAAoB,CAClB;AACD;;AAED,UAAUC,KAAV,GAAkB;AAChB,MAAI;AACF;AACA,UAAMd,KAAK,CAAC,IAAD,CAAX;AACA,UAAMM,GAAG,CAAC;AACR;AACAS,MAAAA,IAAI,EAAER;AAFE,KAAD,CAAT;AAID,GAPD,CAOE,OAAOS,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMV,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAEP;AADE,KAAD,CAAT;AAGD;AACF;;AAED,UAAUW,UAAV,GAAuB;AACrB;AACA,QAAMhB,SAAS,CAACM,cAAD,EAAiBK,KAAjB,CAAf;AACD,C,CACD;;;AAEA,SAASM,SAAT,GAAqB,CACnB;AACD;;AAED,UAAUC,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMrB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMM,GAAG,CAAC;AACR;AACAS,MAAAA,IAAI,EAAEJ;AAFE,KAAD,CAAT;AAID,GAPD,CAOE,OAAOK,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMV,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAEH;AADE,KAAD,CAAT;AAGD;AACF;;AAED,UAAUU,WAAV,GAAwB;AACtB,QAAMnB,SAAS,CAACO,eAAD,EAAkBW,MAAlB,CAAf;AACD;;AAED,eAAe,UAAUE,QAAV,GAAqB;AAClC,QAAMxB,GAAG,CAAC,CACRE,IAAI,CAACkB,UAAD,CADI,EACU;AAClBlB,EAAAA,IAAI,CAACqB,WAAD,CAFI,CAAD,CAAT;AAID","sourcesContent":["import { all, delay, fork, take, takeEvery, takeLatest, call, put } from \"redux-saga/effects\";\r\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user\";\r\n\r\n//#region api/watch/watch동작 이 세개의 함수가 하나의 사이클(패턴)을 이루게끔 만들자\r\nfunction loginAPI() {\r\n  // 서버에 요청을 보내는 부분\r\n}\r\n\r\nfunction* login() {\r\n  try {\r\n    //yield call(loginAPI); // 함수 동기적 호출\r\n    yield delay(2000);\r\n    yield put({\r\n      // put은 dispatch와 동일\r\n      type: LOG_IN_SUCCESS\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  // 로그인 액션이 실행되면 중단점이 풀리고 로그인 성공 액션을 실행한다\r\n  yield takeEvery(LOG_IN_REQUEST, login)\r\n}\r\n//#endregion\r\n\r\nfunction signUpAPI() {\r\n  // 서버에 요청을 보내는 부분\r\n}\r\n\r\nfunction* signUp() {\r\n  try {\r\n    //yield call(signUpAPI); // 함수 동기적 호출\r\n    yield delay(2000);\r\n    yield put({\r\n      // put은 dispatch와 동일\r\n      type: SIGN_UP_SUCCESS\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeEvery(SIGN_UP_REQUEST, signUp)\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogin), // 함수 비동기적 호출\r\n    fork(watchSignUp),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}