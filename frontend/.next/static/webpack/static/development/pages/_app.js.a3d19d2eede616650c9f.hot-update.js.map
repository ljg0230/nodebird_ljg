{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.a3d19d2eede616650c9f.hot-update.js","sources":["webpack:///./components/UserProfile.js","webpack:///./sagas/user.js"],"sourcesContent":["import React, { useCallback } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Card, Avatar, Button } from \"antd\";\r\nimport { logoutRequestAction } from \"../reducers/user\";\r\n\r\nconst UserProfile = () => {\r\n  const { me } = useSelector(state => state.me);\r\n  const dispatch = useDispatch();\r\n\r\n  const onLogout = useCallback(() => {\r\n    // useCallback을 하는 이유는 자식컴포넌트에 props로 전달하기 때문\r\n    dispatch(logoutRequestAction);\r\n  }, []);\r\n  return (\r\n    <Card\r\n      actions={[\r\n        <div key=\"twit\">\r\n          짹짹!\r\n          <br />\r\n          {me.Post.length}\r\n        </div>,\r\n        <div key=\"following\">\r\n          팔로잉\r\n          <br />\r\n          {me.Followings.length}\r\n        </div>,\r\n        <div key=\"follower\">\r\n          팔로워\r\n          <br />\r\n          {me.Followers.length}\r\n        </div>\r\n      ]}\r\n    >\r\n      <Card.Meta\r\n        avatar={<Avatar>{me.nickname[0]}</Avatar>}\r\n        title={me.nickname}\r\n      />\r\n      <Button style={{ margin: '20px -10px 0'}} onClick={onLogout}>로그아웃</Button>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default UserProfile;\r\n","import { all, delay, fork, take, takeEvery, takeLatest, call, put } from \"redux-saga/effects\";\r\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user\";\r\n\r\n//#region api/watch/watch동작 이 세개의 함수가 하나의 사이클(패턴)을 이루게끔 만들자\r\nfunction loginAPI() {\r\n  // 서버에 요청을 보내는 부분\r\n}\r\n\r\nfunction* login() {\r\n  try {\r\n    //yield call(loginAPI); // 함수 동기적 호출\r\n    yield delay(2000);\r\n    yield put({\r\n      // put은 dispatch와 동일\r\n      type: LOG_IN_SUCCESS\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  // 로그인 액션이 실행되면 중단점이 풀리고 로그인 성공 액션을 실행한다\r\n  yield takeEvery(LOG_IN_REQUEST, login)\r\n}\r\n//#endregion\r\n\r\nfunction signUpAPI() {\r\n  // 서버에 요청을 보내는 부분\r\n}\r\n\r\nfunction* signUp() {\r\n  try {\r\n    //yield call(signUpAPI); // 함수 동기적 호출\r\n    yield delay(2000);\r\n    yield put({\r\n      // put은 dispatch와 동일\r\n      type: SIGN_UP_SUCCESS\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeEvery(SIGN_UP_REQUEST, signUp)\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogin), // 함수 비동기적 호출\r\n    fork(watchSignUp),\r\n  ]);\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AClCA;;;AAgBA;;;AAUA;;;AAgBA;;;AAIA;AACA;AAvDA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAJA;AAAA;AAIA;AACA;AACA;AAFA;AACA;AALA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AASA;AATA;AAUA;AACA;AADA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAJA;AAAA;AAIA;AACA;AACA;AAFA;AACA;AALA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AASA;AATA;AAUA;AACA;AADA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}