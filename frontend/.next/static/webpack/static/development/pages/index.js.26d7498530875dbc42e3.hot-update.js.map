{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.26d7498530875dbc42e3.hot-update.js","sources":["webpack:///./components/PostForm.js","webpack:///./reducers/post.js"],"sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from \"../reducers/post\";\r\n\r\nconst PostForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [text, setText] = useState(\"\");\r\n  const { imagePaths, isAddingPost, postAdded } = useSelector(\r\n    state => state.post\r\n  );\r\n  const imageInput = useRef();\r\n\r\n  useEffect(() => {\r\n    if (postAdded) {\r\n      setText(\"\");\r\n    }\r\n  }, [postAdded]);\r\n\r\n  const onSubmitForm = useCallback(e => {\r\n    //props로 들어가면 callback!\r\n    e.preventDefault();\r\n    if (!text || !text.trim()) {\r\n      return alert('게시글을 작성하세요.');\r\n    }\r\n    dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data: {\r\n        content: text,\r\n      }\r\n    });\r\n  }, [text]);\r\n\r\n  const onChangeText = useCallback(e => {\r\n    setText(e.target.value);\r\n  }, []);\r\n\r\n  const onChangeImages = useCallback((e) => {\r\n    console.log(e.target.files);\r\n    const imageFormData = new FormData();\r\n    [].forEach.call(e.target.files, (f) => {\r\n      imageFormData.append('image', f);  // 첫번째인수(key) 이름으로 서버쪽에서 인식함. spa 유지를 위해 ajax 로 FormData 객체를 쓰고 일일이 이미지를 append 해준다\r\n    });\r\n    dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    });\r\n  }, []);\r\n\r\n  const onClickImageUpload = useCallback(() => {\r\n    imageInput.current.click();\r\n  }, [imageInput.current]);\r\n\r\n  const onRemoveImage = useCallback(index => () => {\r\n    dispatch({\r\n      type: REMOVE_IMAGE,\r\n      index,\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Form\r\n      style={{ margin: \"20px 0 20px\" }}\r\n      encType=\"multipart/form-data\"\r\n      onSubmit={onSubmitForm}\r\n    >\r\n      <Input.TextArea\r\n        maxLength={140}\r\n        placeholder=\"어떤 일이 있었나요?\"\r\n        value={text}\r\n        onChange={onChangeText}\r\n      />\r\n      <div>\r\n        <input type=\"file\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n        <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n        <Button\r\n          type=\"primary\"\r\n          style={{ float: \"right\" }}\r\n          loading={isAddingPost}\r\n          htmlType=\"submit\"\r\n        >\r\n          짹짹\r\n        </Button>\r\n      </div>\r\n      <div>\r\n        {imagePaths.map((v, i) => (\r\n          <div key={v} style={{ display: \"inline-block\" }}>\r\n            <img\r\n              src={`http://localhost:3066/${v}`}\r\n              style={{ width: \"200px\" }}\r\n              alt={v}\r\n            />\r\n            <div>\r\n              <Button onClick={onRemoveImage(i)}>제거</Button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n","export const initialState = {\r\n  mainPosts: [], // 화면에 보일 포스트들\r\n  imagePaths: [], // 미리보기 이미지 경로\r\n  addPostErrorReason: \"\", // 포스트 업로드 실패 사유\r\n  isAddingPost: false, // 포스트 업로드 중\r\n  postAdded: false, // 포스트 업로드 성공\r\n  isAddingComment: false,\r\n  addCommentErrorReason: \"\",\r\n  commentAdded: false,\r\n};\r\n\r\nconst dummyComment = {\r\n  id: 1,\r\n  User: {\r\n    id: 1,\r\n    nickname: '이정걸걸'\r\n  },\r\n  createdAt: new Date(),\r\n  content: \"Dummy Comment!\"\r\n};\r\n\r\nexport const LOAD_MAIN_POSTS_REQUEST = \"LOAD_MAIN_POSTS_REQUEST\";\r\nexport const LOAD_MAIN_POSTS_SUCCESS = \"LOAD_MAIN_POSTS_SUCCESS\";\r\nexport const LOAD_MAIN_POSTS_FAILURE = \"LOAD_MAIN_POSTS_FAILURE\";\r\n\r\nexport const LOAD_HASHTAG_REQUEST = \"LOAD_HASHTAG_REQUEST\";\r\nexport const LOAD_HASHTAG_SUCCESS = \"LOAD_HASHTAG_SUCCESS\";\r\nexport const LOAD_HASHTAG_FAILURE = \"LOAD_HASHTAG_FAILURE\";\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = \"LOAD_USER_POSTS_REQUEST\";\r\nexport const LOAD_USER_POSTS_SUCCESS = \"LOAD_USER_POSTS_SUCCESS\";\r\nexport const LOAD_USER_POSTS_FAILURE = \"LOAD_USER_POSTS_FAILURE\";\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\r\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\r\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\r\n\r\nexport const REMOVE_IMAGE = \"REMOVE_IMAGE\";\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\r\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\r\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\r\n\r\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\r\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\r\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const LOAD_COMMENTS_REQUEST = \"LOAD_COMMENTS_REQUEST\";\r\nexport const LOAD_COMMENTS_SUCCESS = \"LOAD_COMMENTS_SUCCESS\";\r\nexport const LOAD_COMMENTS_FAILURE = \"LOAD_COMMENTS_FAILURE\";\r\n\r\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\r\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\r\nexport const RETWEET_FAILURE = \"RETWEET_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case UPLOAD_IMAGES_REQUEST: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case UPLOAD_IMAGES_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        imagePaths: [...state.imagePaths, ...action.data],\r\n      };\r\n    }\r\n    case UPLOAD_IMAGES_FAILURE: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case REMOVE_IMAGE: {\r\n      return {\r\n        ...state,\r\n        imagePaths: state.imagePaths.filter((v, i) => i !== action.index),\r\n      }\r\n    }\r\n    case ADD_POST_REQUEST: {\r\n      return {\r\n        ...state,\r\n        isAddingPost: true,\r\n        addPostErrorReason: \"\",\r\n        postAdded: false\r\n      };\r\n    }\r\n    case ADD_POST_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isAddingPost: false,\r\n        mainPosts: [action.data, ...state.mainPosts],\r\n        postAdded: true\r\n      };\r\n    }\r\n    case ADD_POST_FAILURE: {\r\n      return {\r\n        ...state,\r\n        isAddingPost: false,\r\n        addPostErrorReason: action.error\r\n      };\r\n    }\r\n    case ADD_COMMENT_REQUEST: {\r\n      return {\r\n        ...state,\r\n        isAddingComment: true,\r\n        addCommentErrorReason: \"\",\r\n        commentAdded: false\r\n      };\r\n    }\r\n    case ADD_COMMENT_SUCCESS: {\r\n      const postIndex = state.mainPosts.findIndex(\r\n        v => v.id === action.data.postId\r\n      );\r\n      const post = state.mainPosts[postIndex];\r\n      const Comments = [...post.Comments, action.data.comment];\r\n      const mainPosts = [...state.mainPosts];\r\n      mainPosts[postIndex] = { ...post, Comments };\r\n      return {\r\n        ...state,\r\n        isAddingComment: false,\r\n        mainPosts,\r\n        commentAdded: true\r\n      };\r\n    }\r\n    case ADD_COMMENT_FAILURE: {\r\n      return {\r\n        ...state,\r\n        isAddingComment: false,\r\n        addCommentErrorReason: action.error\r\n      };\r\n    }\r\n    case LOAD_COMMENTS_SUCCESS: {\r\n      const postIndex = state.mainPosts.findIndex(\r\n        v => v.id === action.data.postId\r\n      );\r\n      const post = state.mainPosts[postIndex];\r\n      const Comments = action.data.comments;\r\n      const mainPosts = [...state.mainPosts];\r\n      mainPosts[postIndex] = { ...post, Comments };\r\n      return {\r\n        ...state,\r\n        mainPosts\r\n      };\r\n    }\r\n    case LOAD_MAIN_POSTS_REQUEST:\r\n    case LOAD_HASHTAG_REQUEST:\r\n    case LOAD_USER_POSTS_REQUEST: {\r\n      return {\r\n        ...state,\r\n        mainPosts: []\r\n      };\r\n    }\r\n    case LOAD_MAIN_POSTS_SUCCESS:\r\n    case LOAD_HASHTAG_SUCCESS:\r\n    case LOAD_USER_POSTS_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        mainPosts: action.data\r\n      };\r\n    }\r\n    case LOAD_MAIN_POSTS_FAILURE:\r\n    case LOAD_HASHTAG_FAILURE:\r\n    case LOAD_USER_POSTS_FAILURE: {\r\n      return {\r\n        ...state\r\n      };\r\n    }\r\n    default: {\r\n      return {\r\n        ...state\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAIA;AAAA;AAJA;AAAA;AAAA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAFA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AALA;AAOA;AAEA;AAAA;AAAA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AAMA;AAAA;AARA;AAeA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtpHA;AAsHA;AACA;AACA;;;;A","sourceRoot":""}